{"version":3,"file":"script.bundle.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,iBAAiB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,iBAAiB;;AAEzC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,qCAAqC,2BAA2B;AAChE;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,uBAAuB;AACxD,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA,uCAAuC,YAAY;AACnD,kDAAkD,iBAAiB,IAAI,YAAY;AACnF,yCAAyC,kCAAkC,IAAI,YAAY;AAC3F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA,wBAAwB,qBAAqB;AAC7C,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA,+CAA+C,OAAO,cAAc,eAAe;AACnF,uCAAuC,yBAAyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C,4BAA4B,uBAAuB;AACnD,6BAA6B,cAAc,EAAE,cAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,IAAI,SAAS,IAAI;AAC7C;AACA,kCAAkC,WAAW;AAC7C;AACA;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAA2E;AACzF,cAAc,4EAA4E;AAC1F,cAAc,yEAAyE;AACvF,cAAc,yEAAyE;AACvF,cAAc,iFAAiF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;UCtRA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://battle-ship/./src/script.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/webpack/before-startup","webpack://battle-ship/webpack/startup","webpack://battle-ship/webpack/after-startup"],"sourcesContent":["class Game {\n    constructor() {\n        this.player1 = new Player('player1')\n        this.player2 = new Player('player2')        \n        this.currentPlayer = this.player1\n        this.otherPlayer = this.player2\n        this.p1Board = new Grid()        \n        this.p2Board = new Grid()\n        this.gameOver = false\n    }\n    startGame() {\n\n        // start new game\n        this.setAIShips()\n    \n    } \n    togglePlayer() {\n        [this.currentPlayer, this.otherPlayer] = [this.otherPlayer, this.currentPlayer]\n    }\n    placeShips(isPlayer1, shipIndex, coordiantes) {\n        const player = isPlayer1 ? this.player1 : this.player2\n        const ship = player.ships[shipIndex].ship\n        const location = ship.shipLocation\n        const isHorizontal = ship.isHorizontal\n\n        for (let i = 0; i < ship.length; i++) {\n\n            location[i] = isHorizontal ? coordiantes + i : coordiantes + (i * 10)\n    \n        }\n        return location\n    }\n    setAILocation(shipIndex, coordiantes) {\n        const ship = this.player2.ships[shipIndex].ship\n        const location = ship.shipLocation\n        const isHorizontal = ship.isHorizontal\n\n        for (let i = 0; i < ship.length; i++) {\n\n            location[i] = isHorizontal ? coordiantes + i : coordiantes + (i * 10)\n\n        }\n        return location\n    }\n    setLocation(player, shipIndex, coordinate) {\n\n        const ship = player.ships[shipIndex].ship\n        const location = ship.shipLocation    \n        const length = ship.length   \n        const midIndex = Math.ceil(length / 2) - 1\n\n       for (let i = 0; i < length; i++) {        \n        if (ship.isHorizontal) {\n            location[i] = (coordinate - midIndex) + i\n            \n        } else { //vertical\n            location[i] = (coordinate - (midIndex * 10)) + (i * 10)\n        }        \n       }\n        console.log(`location: ${location}`)\n        return location\n    }\n    isDuplicate(player, location) {\n\n        const isOccupied = player.occupiedCoordinates.some(occupiedLocation => {\n            return occupiedLocation.some(occupiedCoordinate => location.includes(occupiedCoordinate))\n        })\n        if (!isOccupied) {\n            player.occupiedCoordinates.push(location)\n            console.log(`occupied: ${player.occupiedCoordinates}`)\n           return  false\n        } else {\n            console.log(`duplicate found`)\n            return true\n        }\n    }\n    getRandomCoord() {\n\n        return Math.floor(Math.random() * 99)\n    }\n    setAIShips() {\n\n        const ai = this.player2\n        const aiShips = ai.ships\n\n        //empty the array \n        ai.occupiedCoordinates.length = 0\n        let location = null\n               \n        for (let i = 0; i < aiShips.length; i++) {\n            // randomize isHorizontal   \n            const randomBoolean = Math.random() < 0.5\n            aiShips[i].ship.isHorizontal = randomBoolean\n\n            // random coordinates\n            const randomCoord = this.getRandomCoord()\n            const randomCoord2 = this.getRandomCoord()\n            \n            location = this.setAILocation(i, randomCoord)\n            \n            //check for invalid coordiantes\n            const isDuplicateFound = this.isDuplicate(ai, location)\n            let validCoords = this.checkValidity()\n            while (!validCoords) {\n                location = this.setAILocation(i, randomCoord2)\n            }\n\n        }\n        console.log(`occupied: ${ai.occupiedCoordinates}`)\n        console.log(`location: ${location}`)     \n        return location\n    }\n    checkValidity() {\n        for (let j = 0; j < location.length; j++) {               \n            //if coordinates are invalid or already occupied try again\n             if (this.p1Board.isValid(location[j]) === false || isDuplicateFound ) {                 \n                 console.log(`retry: ${location[j]}`)\n                 console.log(`isDuplicateFound: ${isDuplicateFound}, ${location[j]}`)\n                 console.log(`isValid: ${this.p1Board.isValid(location[j])}, ${location[j]}`)\n                return false\n             }\n         }\n         return true\n    }\n    linkCells(value) {\n\n        const isLastCol = value % 10 === 9\n        const isFirstCol = value % 10 === 0\n        const isTopRow = value >= 0\n        const isBottomRow = value <= 99\n        return {\n            cell: value,\n            prevHorizontal: isFirstCol ? null : value - 1,\n            nextHorizontal: isLastCol ? null : value + 1,\n            prevVertical: isTopRow ? value - 10 : null,\n            nextVertical: isBottomRow ? value + 10 : null\n        }\n    }     \n\n    // isHit(coords) {\n\n    //     const occupied = this.otherPlayer.occupiedCoordinates\n    //     const includesCoords = occupied.includes(coords)\n    \n    //     return includesCoords  \n    // }\n    isHit(coords) {\n        const occupied = this.otherPlayer.occupiedCoordinates\n        console.log(`${this.otherPlayer.name}`)\n        \n        for (let i = 0; i < occupied.length; i++) {\n            for (let j = 0; j < occupied[i].length; j++) {\n                \n                if (coords === occupied[i][j]) {\n                    if (!occupied[i][j].isHit) {\n                        console.log(`coords: ${coords}, occupied: ${occupied[i][j]}`)\n                console.log(`coords: ${coords == occupied[i][j]}`)\n                        this.otherPlayer.ships[i].hit()\n                        occupied[i][j].isHit = true\n                        return true\n                    }\n                }\n            }\n        }\n\n        return false\n    }\n    isGameOver() {\n        \n        //if otherplayer .ships[i].isSunk game is over\n        for (let i = 0; i < this.otherPlayer.ships.length; i++) {\n            if (this.otherPlayer.ships[i].isSunk === true) {\n              return  this.gameOver = true\n\n            }\n        }\n      return  this.gameOver = false\n    }\n}\n\nclass Grid {\n    constructor() {\n        this.yAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.xAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.grid = this.createGrid()\n    }\n    createGrid() {\n        const grid = []\n\n        for (let i = 0; i < this.yAxis.length; i++) {\n            for (let j = 0; j < this.xAxis.length; j++) {\n                grid.push(`${this.yAxis[i]}${this.xAxis[j]}`)\n            }\n        }\n        \n        return grid\n    }\n    isValid(coordinate) {\n        const row = Math.floor(coordinate / 10)\n        const col = coordinate % 10\n        console.log(`row: ${row}, col: ${col}`)\n        if (row >= 0 && row < 10 && col >= 0 && col < 10 ) {\n            console.log(`valid: ${coordinate}`)\n            return true\n        }\n        console.log(`invalid: ${coordinate}`)\n        return false\n    }\n    findCoords(index) {\n        if (index >= 0 && index < this.grid.length) {\n            return this.grid[index]\n        } else {\n            return 'Invalid index'\n        }\n    }\n} \n\nclass Ship {\n    constructor(shipType) {\n        this.ship = shipType\n        this.hitPoints = this.ship.length       \n        this.isSunk = false\n    }\n    hit() {\n        console.log()\n        if(this.isSunk === true) {\n            return\n        }\n        this.hitPoints -= 1\n        if (this.hitPoints <= 0) {\n        this.isSunk = true\n        console.log(`You sunk my ${this.ship.name}!`)\n      }\n      return this.hitPoints\n    }    \n}\n\nclass Player {\n    constructor(name, ) {\n        this.name = name        \n        this.occupiedCoordinates = []\n        this.choosenCoordinates = []        \n        this.ships = this.createShips()\n        \n    }\n    createShips() {\n        const ships = [\n            { name: 'Carrier', length: 5, shipLocation: [0,0,0,0,0], isHorizontal: true },     //ship 0\n            { name: 'Battleship', length: 4, shipLocation: [0,0,0,0], isHorizontal: true },    //ship 1\n            { name: 'Destroyer', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 2\n            { name: 'Submarine', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 3\n            { name: 'Patrol', length: 2, shipLocation: [0,0], isHorizontal: true }             //ship 4\n        ]\n        const playerShips = []\n        for(const ship of ships) {\n            playerShips.push(new Ship(ship))\n        }\n        return playerShips\n    }\n    fire(coords) {\n        this.choosenCoordinates.push(coords)\n        return coords\n    } \n    switchOrientation(shipIndex) {\n        const ship = this.ships[shipIndex].ship        \n        ship.isHorizontal = !ship.isHorizontal\n        console.log(ship.name, ship.isHorizontal)\n    }\n}\n    \n\n\n\nmodule.exports = {\n    Grid,\n    Player,\n    Ship,\n    Game,\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/script.js\");\n",""],"names":[],"sourceRoot":""}