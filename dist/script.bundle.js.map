{"version":3,"file":"script.bundle.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oCAAoC,qBAAqB;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oBAAoB;AAC7C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,2BAA2B,sBAAsB,KAAK,SAAS;AAC/D;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC,8BAA8B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,eAAe;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,iBAAiB;;AAEzC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C,4BAA4B,uBAAuB;AACnD,6BAA6B,cAAc,EAAE,cAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAA2E;AACzF,cAAc,4EAA4E;AAC1F,cAAc,yEAAyE;AACvF,cAAc,yEAAyE;AACvF,cAAc,iFAAiF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU;AAC5C;AACA;AACA;;AAEA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;;AAEA,wBAAwB,uBAAuB;AAC/C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCtYA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://battle-ship/./src/script.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/webpack/before-startup","webpack://battle-ship/webpack/startup","webpack://battle-ship/webpack/after-startup"],"sourcesContent":["class Game {\n    constructor() {\n        this.player1 = new Player('player1')\n        this.player2 = new Player('player2')        \n        this.currentPlayer = this.player1\n        this.otherPlayer = this.player2\n        this.p1Board = new Grid()\n        this.gameOver = false\n    }\n    startGame() {\n\n        // start new game\n        // this.setAIShips()\n        this.player1.autoPlaceShips()\n        this.player2.autoPlaceShips()\n    \n    } \n    togglePlayer() {\n        [this.currentPlayer, this.otherPlayer] = [this.otherPlayer, this.currentPlayer]\n        return this.currentPlayer\n    }    \n    setLocation(player, shipIndex, coordinate) {\n\n        const ship = player.ships[shipIndex].ship\n        const location = ship.shipLocation    \n        const length = ship.length   \n        const midIndex = Math.ceil(length / 2) - 1\n\n       for (let i = 0; i < length; i++) {        \n        if (ship.isHorizontal) {\n            location[i] = (coordinate - midIndex) + i\n            \n        } else { //vertical\n            location[i] = (coordinate - (midIndex * 10)) + (i * 10)\n        }        \n       }\n        console.log(`location: ${location}`)\n        return location\n    }\n    \n    getRandomCoord() {\n\n        return Math.floor(Math.random() * 99)\n    }\n    aiShotLogic() {\n\n        const newCoord  = new aiCoordGenerator()\n        console.log(`UsedNumbers: ${newCoord.usedNumbers}`)\n        let randomNum = newCoord.getRandomUniqueNumber()\n\n       \n        return randomNum\n       \n    }\n    setAIShips() {\n        const ai = this.player2\n        const aiShips = ai.ships\n        ai.occupiedCoordinates.length = 0\n        \n        for ( let i = 0; i < aiShips.length; i++ ) {\n            const randomBoolean = Math.random() < 0.5\n            aiShips[i].ship.isHorizontal = randomBoolean\n\n            let location = null\n            let isOccupied = false\n            let isValid = false\n            let inRange = false\n\n            while ( !isValid || !inRange || isOccupied ) {\n                const randomCoord = this.getRandomCoord()\n                \n                location = this.setAILocation(i, randomCoord)\n\n                this.removeRejected(false, location)\n        \n                isOccupied = this.isDuplicate(ai, location)           \n                isValid = this.checkValidity(location)\n                inRange = this.isInRange(false)\n\n            }\n\n            console.log(`${aiShips[i].ship.name} at ${location}`)\n        }\n\n        let isShort = this.checkOccupiedLength(false)           \n        if (isShort) {\n            this.setAIShips()\n        }\n\n        console.log(`occupied: ${ai.occupiedCoordinates.length}`)\n    }\n    removeRejected(isPlayer1, location) {\n        \n        const player = isPlayer1 ? this.player1 : this.player2\n        const lastIndex = player.occupiedCoordinates.reduceRight((acc, occupiedLocation, currentIndex) => {\n            if (!acc && occupiedLocation.some(occupiedCoordinate => location.includes(occupiedCoordinate))) {\n                return currentIndex\n            }\n            return acc\n        }, null)\n        if (lastIndex !== null) {\n            player.occupiedCoordinates.splice(lastIndex, 1)\n        }\n    }\n    checkOccupiedLength(isPlayer1) {\n       const occupiedLength =  isPlayer1 ? this.player1.occupiedCoordinates.length : this.player2.occupiedCoordinates.length\n       console.log(`occupiedLength: ${occupiedLength}`) \n       if (occupiedLength === 5) {\n            return false\n        } \n        return true\n    }\n    setAILocation(shipIndex, coordiantes) {\n        const ship = this.player2.ships[shipIndex].ship\n        const location = ship.shipLocation\n        const isHorizontal = ship.isHorizontal\n\n        for (let i = 0; i < ship.length; i++) {\n\n            location[i] = isHorizontal ? coordiantes + i : coordiantes + (i * 10)\n\n        }\n     \n        return location\n    }\n    isDuplicate(player, location) {\n\n        const isOccupied = player.occupiedCoordinates.some(occupiedLocation => {\n            return occupiedLocation.some(occupiedCoordinate => location.includes(occupiedCoordinate))\n        })\n        \n        if (!isOccupied) {\n            player.occupiedCoordinates.push(location)\n        }\n        \n        return isOccupied\n    }\n    checkValidity(location) {\n       \n        for ( const coord of location ) {\n            if ( !this.p1Board.isValid(coord)) {\n                return false\n            }\n        }\n\n        return true\n    }\n    isInRange(isPlayer1) {\n      \n        const ships = isPlayer1 ? this.player1.ships : this.player2.ships\n       \n        for ( const ship of ships ) {            \n            for ( const coord of ship.ship.shipLocation ) {    \n                if ( coord < 0 || coord > 99 ) {\n                    return false\n                }               \n            }\n        }\n       \n        return true\n    }\n    isGameOver() {\n        \n        //if otherplayer .ships[i].isSunk game is over\n        for (let i = 0; i < this.otherPlayer.ships.length; i++) {\n            if (this.otherPlayer.ships[i].isSunk === true) {\n            this.gameOver = true\n            }\n        }\n        \n        return this.gameOver\n    }\n}\nclass aiCoordGenerator {\n    constructor() {\n        this.usedNumbers = new Set()\n    }\n    reset() {\n        this.usedNumbers.clear()\n    }\n    getRandomUniqueNumber() {\n        const min = 0\n        const max = 99\n        let randomNum \n\n        do {\n            randomNum = Math.floor(Math.random() * (max - min + 1)) + min\n        } while (this.usedNumbers.has(randomNum))\n\n        this.usedNumbers.add(randomNum)\n\n        return randomNum\n    }\n}\n\nclass Grid {\n    constructor() {\n        this.yAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.xAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.grid = this.createGrid()\n    }\n    createGrid() {\n        const grid = []\n\n        for (let i = 0; i < this.yAxis.length; i++) {\n            for (let j = 0; j < this.xAxis.length; j++) {\n                grid.push(`${this.yAxis[i]}${this.xAxis[j]}`)\n            }\n        }\n        \n        return grid\n    }\n    isValid(coordinate) {\n        const row = Math.floor(coordinate / 10)\n        const col = coordinate % 10\n        if (row >= 0 && row <= 9 && col >= 0 && col <= 9 && col + 1 <= 9 ) {\n            return true\n        }\n        return false\n    }\n    findCoords(index) {\n        if (index >= 0 && index < this.grid.length) {\n            return this.grid[index]\n        } else {\n            return 'Invalid index'\n        }\n    }\n} \n\nclass Ship {\n    constructor(shipType) {\n        this.ship = shipType\n        this.hitPoints = this.ship.length       \n        this.isSunk = false\n    }\n    hit() {\n        if(this.isSunk === true) {\n            return\n        }\n        this.hitPoints -= 1\n        if (this.hitPoints <= 0) {\n        this.isSunk = true\n        console.log(`You sunk my ${this.ship.name}!`)\n      }\n      return this.hitPoints\n    }    \n}\n\nclass Player {\n    constructor(name, ) {\n        this.name = name        \n        this.occupiedCoordinates = []\n        this.choosenCoordinates = []        \n        this.ships = this.createShips()\n        this.board = new Grid()\n        \n    }\n    createShips() {\n        const ships = [\n            { name: 'Carrier', length: 5, shipLocation: [0,0,0,0,0], isHorizontal: true },     //ship 0\n            { name: 'Battleship', length: 4, shipLocation: [0,0,0,0], isHorizontal: true },    //ship 1\n            { name: 'Destroyer', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 2\n            { name: 'Submarine', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 3\n            { name: 'Patrol', length: 2, shipLocation: [0,0], isHorizontal: true }             //ship 4\n        ]\n        const playerShips = []\n        for(const ship of ships) {\n            playerShips.push(new Ship(ship))\n        }\n        return playerShips\n    }\n    switchOrientation(shipIndex) {\n        const ship = this.ships[shipIndex].ship        \n        ship.isHorizontal = !ship.isHorizontal\n    }\n    setLocation(shipIndex, coordinates) {\n        console.log(`shipIndex: ${shipIndex}`)\n        const ship = this.ships[shipIndex].ship\n        const location = ship.shipLocation\n        const isHorizontal = ship.isHorizontal\n\n        for ( let i = 0; i < ship.length; i++ ) {\n            location[i] = isHorizontal ? coordinates + i : coordinates + (i * 10)      \n         }\n         return location\n    }\n    autoPlaceShips() {\n\n        this.occupiedCoordinates.length = 0\n\n        for (let i = 0; i < this.ships.length; i++) {\n            const randomBoolean = Math.random() < 0.5\n            this.ships[i].ship.isHorizontal = randomBoolean\n\n            let location = null\n            let isOccupied = false\n            let isValid = false\n            let inRange = false\n\n            while ( !isValid || !inRange || isOccupied ) {\n\n                const randomCoord = Math.floor(Math.random() * 99)\n                location = this.setLocation(i, randomCoord)\n\n                this.removeRejected(location)\n\n                isOccupied = this.isOccupied(location)\n                isValid = this.checkValidity(location)\n                inRange = this.isInRange()\n\n            }\n        }\n        let isShort = this.checkOccupiedLength()\n        if (isShort) {\n            this.autoPlaceShips()\n        }\n\n    }\n    isInRange() {\n        const ships = this.ships\n        for (const ship of ships) {\n            for (const coord of ship.ship.shipLocation) {\n                if (coord < 0 || coord > 99) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n    checkValidity(location) {\n        for (const coord of location) {\n            if ( !this.board.isValid(coord)) {\n                return false\n            }\n        }\n        return true\n    }\n    isOccupied(location) {\n        const isOccupied = this.occupiedCoordinates.some(occupiedLocation => {\n            return occupiedLocation.some(occupiedCoordinate => location.includes(occupiedCoordinate))\n        })\n\n        if ( !isOccupied ) {\n            this.occupiedCoordinates.push(location)\n        }\n\n        return isOccupied\n    }\n    removeRejected(location) {\n        //checks coordinatesare occupied removes coordinates from occupied array        \n        const lastIndex = this.occupiedCoordinates.reduceRight((acc, occupiedLocation, currentIndex) => {\n            if ( !acc && occupiedLocation.some(occupiedCoordinate => location.includes(occupiedCoordinate))) {\n                return currentIndex\n            }\n            return acc\n        }, null)\n        if ( lastIndex !== null ) {\n            this.occupiedCoordinates.splice(lastIndex, 1)\n        }\n    }\n    checkOccupiedLength(){\n        return this.occupiedCoordinates.length !== 5\n    }\n    fire(coords) {\n        this.choosenCoordinates.push(coords)\n        return coords\n    } \n    isHit(coords) {\n        \n        for (const ship of this.ships) {\n            const isOccupied = ship.ship.shipLocation.some(location => {\n                return coords == location\n            })\n            if (isOccupied) {\n                return true\n            }\n        }\n        return false\n    }\n}\n    \n\n\n\nmodule.exports = {\n    Grid,\n    Player,\n    Ship,\n    Game,\n    aiCoordGenerator,\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/script.js\");\n",""],"names":[],"sourceRoot":""}