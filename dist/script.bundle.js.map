{"version":3,"file":"script.bundle.js","mappings":";;;;;;;;;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C,4BAA4B,uBAAuB;AACnD,6BAA6B,cAAc,EAAE,cAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,2EAA2E;AACzF,cAAc,4EAA4E;AAC1F,cAAc,yEAAyE;AACvF,cAAc,yEAAyE;AACvF,cAAc,iFAAiF;AAC/F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,YAAY;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,iBAAiB;AAC1C;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,wBAAwB,uBAAuB;;AAE/C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;UC3QA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://battle-ship/./src/script.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/webpack/before-startup","webpack://battle-ship/webpack/startup","webpack://battle-ship/webpack/after-startup"],"sourcesContent":["\nclass Game {\n\n    constructor() {\n        this.player1 = new Player('player1')\n        this.player2 = new Player('player2')        \n        this.currentPlayer = this.player2\n        this.otherPlayer = this.player1       \n        this.gameOver = true\n    }\n    startGame() {      \n\n        this.gameOver = false\n        this.player1.autoPlaceShips()\n        this.player2.autoPlaceShips()        \n    } \n    togglePlayer() {\n\n        [this.currentPlayer, this.otherPlayer] = [this.otherPlayer, this.currentPlayer]\n        return this.currentPlayer\n    }          \n    isGameOver() {\n\n        if (this.player1.isGameOver()) {\n            this.player1.message = `Player 2 has won the game`\n            this.gameOver = true\n\n            return true\n        }\n        if (this.player2.isGameOver()) {\n            this.player1.message = `Player 1 has won the game`\n            this.gameOver = true\n\n            return true\n        } \n\n        return false \n    }\n}\n\n\nclass Grid {\n\n    constructor() {\n        this.yAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.xAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.grid = this.createGrid()\n    }\n    createGrid() {\n        const grid = []\n\n        for (let i = 0; i < this.yAxis.length; i++) {\n            for (let j = 0; j < this.xAxis.length; j++) {\n                grid.push(`${this.yAxis[i]}${this.xAxis[j]}`)\n            }\n        }\n        \n        return grid\n    }\n    isValid(coordinate) {\n        const row = Math.floor(coordinate / 10)\n        const col = coordinate % 10\n        if (row >= 0 && row <= 9 && col >= 0 && col <= 9 && col + 1 <= 9 ) {\n            return true\n        }\n        return false\n    }\n    findCoords(index) {\n        if (index >= 0 && index < this.grid.length) {\n            return this.grid[index]\n        } else {\n            return 'Invalid index'\n        }\n    }\n} \n\nclass Ship {\n\n    constructor(shipType) {\n        this.ship = shipType\n        this.hitPoints = this.ship.length       \n        this.isSunk = false\n    }\n    hit() {\n        if(this.isSunk === true) {\n            return\n        }\n        this.hitPoints -= 1\n        let text = `Hit! `\n        if (this.hitPoints <= 0) {\n            text += `You sunk my ${this.ship.name}! `\n        this.isSunk = true\n      }\n      return text\n    }    \n}\n\nclass Player {\n\n    constructor(name, ) {\n        this.name = name        \n        this.occupiedCoordinates = []     \n        this.ships = this.createShips()\n        this.board = new Grid()\n        this.message = null\n        \n    }\n    createShips() {\n\n        const ships = [\n            { name: 'Carrier', length: 5, shipLocation: [0,0,0,0,0], isHorizontal: true },     //ship 0\n            { name: 'Battleship', length: 4, shipLocation: [0,0,0,0], isHorizontal: true },    //ship 1\n            { name: 'Destroyer', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 2\n            { name: 'Submarine', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 3\n            { name: 'Patrol', length: 2, shipLocation: [0,0], isHorizontal: true }             //ship 4\n        ]\n        const playerShips = []\n        for(const ship of ships) {\n            playerShips.push(new Ship(ship))\n        }\n\n        return playerShips\n    }\n    switchOrientation(shipIndex) {\n\n        const ship = this.ships[shipIndex].ship        \n        ship.isHorizontal = !ship.isHorizontal\n    }\n    setManualLocation(shipIndex, coordinate) {\n\n        const ship = this.ships[shipIndex].ship\n        const location = ship.shipLocation\n        const length = ship.length\n        const midIndex = Math.ceil(length / 2) - 1\n\n        for (let i = 0; i < length; i++) {\n            let isHorizontal = ship.isHorizontal\n            location[i] = isHorizontal ? (coordinate - midIndex) + i : (coordinate - (midIndex * 10)) + (i * 10) \n        }\n\n        return location\n    }\n    setLocation(shipIndex, coordinates) {\n\n        const ship = this.ships[shipIndex].ship\n        const location = ship.shipLocation\n        const isHorizontal = ship.isHorizontal\n\n        for ( let i = 0; i < ship.length; i++ ) {\n            location[i] = isHorizontal ? coordinates + i : coordinates + (i * 10)      \n         }\n\n         return location\n    }\n    autoPlaceShips() {\n\n        this.occupiedCoordinates.length = 0\n\n        for (let i = 0; i < this.ships.length; i++) {\n\n            const randomBoolean = Math.random() < 0.5\n            this.ships[i].ship.isHorizontal = randomBoolean\n\n            let location = null\n            let isOccupied = false\n            let isValid = false\n            let inRange = false\n\n            while ( !isValid || !inRange || isOccupied ) {\n\n                const randomCoord = Math.floor(Math.random() * 99)\n                location = this.setLocation(i, randomCoord)\n\n                this.removeRejected(location)\n\n                isOccupied = this.isOccupied(location)\n                isValid = this.checkValidity(location)\n                inRange = this.isInRange()\n            }\n        }\n\n        let isShort = this.checkOccupiedLength()\n\n        if (isShort) {\n            this.autoPlaceShips()\n        }\n    }    \n    isHit(coords) {\n        \n        for (const ship of this.ships) {\n            \n            const isOccupied = ship.ship.shipLocation.some(location => {\n                return coords == location\n            })\n            if (isOccupied) {\n                this.message = ship.hit()\n                \n                return true\n            }\n        }\n        this.message = `Miss`\n        return false\n    }\n    isGameOver() {       \n        for (const ship of this.ships) {\n            if (!ship.isSunk) {\n                return false\n            } \n        }\n        return true\n    }\n    //validating auto placed ships\n    isInRange() {\n        const ships = this.ships\n        for (const ship of ships) {\n            for (const coord of ship.ship.shipLocation) {\n                if (coord < 0 || coord > 99) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n    checkValidity(location) {\n        for (const coord of location) {\n            if ( !this.board.isValid(coord)) {\n                return false\n            }\n        }\n        return true\n    }\n    isOccupied(location) {\n        const isOccupied = this.occupiedCoordinates.some(occupiedLocation => {\n            return occupiedLocation.some(occupiedCoordinate => location.includes(occupiedCoordinate))\n        })\n\n        if ( !isOccupied ) {\n            this.occupiedCoordinates.push(location)\n        }\n\n        return isOccupied\n    }\n    removeRejected(location) {\n        //checks if coordinates are occupied removes coordinates from occupied array        \n        const lastIndex = this.occupiedCoordinates.reduceRight((acc, occupiedLocation, currentIndex) => {\n            if ( !acc && occupiedLocation.some(occupiedCoordinate => location.includes(occupiedCoordinate))) {\n                return currentIndex\n            }\n            return acc\n        }, null)\n        if ( lastIndex !== null ) {\n            this.occupiedCoordinates.splice(lastIndex, 1)\n        }\n    }\n    checkOccupiedLength(){\n        return this.occupiedCoordinates.length !== 5\n    }\n}\n    \n\n\n\nmodule.exports = {\n    Grid,\n    Player,\n    Ship,\n    Game,\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/script.js\");\n",""],"names":[],"sourceRoot":""}