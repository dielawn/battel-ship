{"version":3,"file":"index.bundle.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,qCAAqC,2BAA2B;AAChE;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,YAAY;AAChD;AACA,wBAAwB,uBAAuB;AAC/C,yCAAyC,cAAc;AACvD;AACA,qCAAqC,WAAW;AAChD;AACA;AACA,wBAAwB,uBAAuB;AAC/C,yCAAyC,cAAc,YAAY,YAAY,WAAW,gCAAgC;AAC1H;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wBAAwB,oBAAoB;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA,gDAAgD,iBAAiB,IAAI,YAAY;AACjF,uCAAuC,kCAAkC,IAAI,YAAY;AACzF;AACA;AACA;AACA,0CAA0C,YAAY;AACtD,qDAAqD,iBAAiB,IAAI,YAAY;AACtF,4CAA4C,kCAAkC,IAAI,YAAY;AAC9F;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD,iCAAiC,SAAS;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,wBAAwB,qBAAqB;AAC7C,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C,4BAA4B,uBAAuB;AACnD,6BAA6B,cAAc,EAAE,cAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,IAAI,SAAS,IAAI;AAC7C;AACA,kCAAkC,WAAW;AAC7C;AACA;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAA2E;AACzF,cAAc,4EAA4E;AAC1F,cAAc,yEAAyE;AACvF,cAAc,yEAAyE;AACvF,cAAc,iFAAiF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;UCxRA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNoC;;AAEpC;AACA,eAAe,yCAAI;AACnB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,oBAAoB,QAAQ;;AAE5B;AACA,4BAA4B,UAAU,YAAY,EAAE;AACpD;AACA;AACA;;AAEA;AACA,oBAAoB,QAAQ;;AAE5B;AACA,0BAA0B,UAAU,YAAY,EAAE;AAClD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;;AAE7B;AACA;AACA;AACA,2BAA2B,OAAO,GAAG,UAAU;AAC/C;AACA,kCAAkC,iCAAiC;AACnE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO,YAAY,eAAe;;AAE7D;AACA;AACA,+BAA+B,WAAW,iBAAiB,YAAY;;AAEvE;AACA;AACA;AACA;AACA,mBAAmB,UAAU,IAAI,UAAU,IAAI,QAAQ,IAAI,OAAO;AAClE,cAAc,UAAU,IAAI,UAAU,IAAI,QAAQ,IAAI,OAAO;AAC7D;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO,YAAY,eAAe;;AAE7D;AACA;AACA,+BAA+B,WAAW,iBAAiB,YAAY;;AAEvE;AACA;AACA;AACA;AACA,mBAAmB,UAAU,IAAI,UAAU,IAAI,QAAQ,IAAI,OAAO;AAClE,cAAc,UAAU,IAAI,UAAU,IAAI,QAAQ,IAAI,OAAO;AAC7D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,UAAU,IAAI,aAAa,IAAI,QAAQ,IAAI,UAAU;AACzE,cAAc,UAAU,IAAI,aAAa,IAAI,QAAQ,IAAI,UAAU;AACnE;;AAEA;AACA;AACA,cAAc,0BAA0B,EAAE,cAAc;AACxD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe,IAAI,oBAAoB;AAC9E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,qBAAqB;AAChD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;;AAGA,EAAE","sources":["webpack://battle-ship/./src/script.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/webpack/runtime/compat get default export","webpack://battle-ship/webpack/runtime/define property getters","webpack://battle-ship/webpack/runtime/hasOwnProperty shorthand","webpack://battle-ship/webpack/runtime/make namespace object","webpack://battle-ship/./src/index.js"],"sourcesContent":["class Game {\n    constructor() {\n        this.player1 = new Player('player1')\n        this.player2 = new Player('player2')        \n        this.currentPlayer = null\n        this.otherPlayer = null\n        this.p1Board = new Grid()        \n        this.p2Board = new Grid()\n        this.gameOver = false\n    }\n    startGame() {\n\n        // start new game\n        this.setAIShips()\n        this.setPlayer()\n    } \n    playRound(hitCoords) {\n\n        //prompt for coords\n        const directHit = this.currentPlayer.fire(hitCoords)\n        console.log(`direct hit: ${directHit}`)\n        \n        this.setPlayer()\n        console.log(`current player: ${this.currentPlayer}`)\n    }\n    setPlayer() {\n\n        //select starting player and change player turn at end of previous turn\n        if (this.currentPlayer === null) {\n            this.currentPlayer = this.player1 \n            this.otherPlayer = this.player2        \n            return this.player1\n        } else if (this.currentPlayer === this.player2) {\n            this.currentPlayer = this.player1\n            this.otherPlayer = this.player2\n            return this.player1\n        }\n        this.currentPlayer = this.player2\n        this.otherPlayer = this.player1\n        return this.player2\n    }\n    setLocation(player, shipIndex, coordinate) {\n\n        const ship = player.ships[shipIndex].ship\n        const location = ship.shipLocation    \n        const length = ship.length   \n        const midIndex = Math.ceil(length / 2) - 1\n\n       for (let i = 0; i < length; i++) {        \n        if (ship.isHorizontal) {\n            location[i] = (coordinate - midIndex) + i\n            \n        } else { //vertical\n            location[i] = (coordinate - (midIndex * 10)) + (i * 10)\n        }        \n       }\n        console.log(`location: ${location}`)\n        return location\n    }\n    isDuplicate(player, location) {\n\n        const isOccupied = player.occupiedCoordinates.some(occupiedLocation => {\n            return occupiedLocation.some(occupiedCoordinate => location.includes(occupiedCoordinate))\n        })\n        if (!isOccupied) {\n            player.occupiedCoordinates.push(location)\n            console.log(`occupied: ${player.occupiedCoordinates}`)\n           return  false\n        } else {\n            console.log(`duplicate found`)\n            return true\n        }\n    }\n    isOccupied(coordiantes) {\n        \n        console.log(`coordinates: ${coordiantes}`)\n        const p1Occupodo = this.player1.occupiedCoordinates\n        for (let i = 0; i < p1Occupodo.length; i++ ) {\n            console.log(`isOccupodoP1: ${p1Occupodo[i]}`)\n        }\n        console.log(`isOccupodoP1: ${p1Occupodo}`)\n        \n        const p2Occupodo = this.player2.occupiedCoordinates\n        for (let i = 0; i < p2Occupodo.length; i++ ) {\n            console.log(`isOccupodoP2: ${p2Occupodo[i]}, coords: ${coordiantes}, equal? ${(p2Occupodo[i] == coordiantes)} `)\n        }\n        console.log(`isOccupodoP2: ${p2Occupodo}`)\n        return p2Occupodo\n    }\n    getRandomCoord() {\n\n        return Math.floor(Math.random() * 99)\n    }\n    setAIShips() {\n\n        const ai = this.player2\n        const aiShips = ai.ships\n\n        //empty the array \n        this.player2.occupiedCoordinates.length = 0\n\n        let location = null\n               \n        for (let i = 0; i < aiShips.length; i++) {\n\n            // randomize isHorizontal   \n            const randomBoolean = Math.random() < 0.5\n            aiShips[i].ship.isHorizontal = randomBoolean\n\n            // random coordinates\n            const randomCoord = this.getRandomCoord()\n            const randomCoord2 = this.getRandomCoord()\n            \n            location = this.setLocation(this.player2, i, randomCoord)\n            \n            //check for invalid coordiantes\n            const isDuplicateFound = this.isDuplicate(this.player2, location)\n            for (let j = 0; j < location.length; j++) {\n               \n               console.log(`isDuplicateFound: ${isDuplicateFound}, ${location[j]}`)\n               console.log(`isValid: ${this.p1Board.isValid(location[j])}, ${location[j]}`)\n               //if coordinates are invalid or already occupied try again\n                if (this.p1Board.isValid(location[j]) === false || isDuplicateFound ) {\n                    location = this.setLocation(this.player2, i, randomCoord2)\n                    console.log(`retry: ${location[j]}`)\n                    console.log(`isDuplicateFound: ${isDuplicateFound}, ${location[j]}`)\n                    console.log(`isValid: ${this.p1Board.isValid(location[j])}, ${location[j]}`)\n                    \n                }\n            }\n        }\n        console.log(`occupied: ${ai.occupiedCoordinates}`)\n        console.log(`location: ${location}`)     \n        return location\n    }\n    linkCells(value) {\n\n        const isLastCol = value % 10 === 9\n        const isFirstCol = value % 10 === 0\n        const isTopRow = value >= 0\n        const isBottomRow = value <= 99\n        return {\n            cell: value,\n            prevHorizontal: isFirstCol ? null : value - 1,\n            nextHorizontal: isLastCol ? null : value + 1,\n            prevVertical: isTopRow ? value - 10 : null,\n            nextVertical: isBottomRow ? value + 10 : null\n        }\n    }       \n    isHit(coords) {\n\n        const occupied = this.otherPlayer.occupiedCoordinates\n\n        for (let i = 0; i < occupied.length; i++) {\n            for (let j = 0; j < occupied[i].length; j++) {\n                if (coords === occupied[i][j].location) {\n                    if (!occupied[i][j].isHit) {\n                        this.otherPlayer.ships[i].hit()\n                        occupied[i][j].isHit = true\n                        return true\n                    }\n                }\n            }\n        }\n\n        return false\n    }\n    isGameOver() {\n        \n        //if otherplayer .ships[i].isSunk game is over\n        for (let i = 0; i < this.otherPlayer.ships.length; i++) {\n            if (this.otherPlayer.ships[i].isSunk === true) {\n              return  this.gameOver = true\n\n            }\n        }\n      return  this.gameOver = false\n    }\n}\n\nclass Grid {\n    constructor() {\n        this.yAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.xAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.grid = this.createGrid()\n    }\n    createGrid() {\n        const grid = []\n\n        for (let i = 0; i < this.yAxis.length; i++) {\n            for (let j = 0; j < this.xAxis.length; j++) {\n                grid.push(`${this.yAxis[i]}${this.xAxis[j]}`)\n            }\n        }\n        \n        return grid\n    }\n    isValid(coordinate) {\n        const row = Math.floor(coordinate / 10)\n        const col = coordinate % 10\n        console.log(`row: ${row}, col: ${col}`)\n        if (row >= 0 && row < 10 && col >= 0 && col < 10 ) {\n            console.log(`valid: ${coordinate}`)\n            return true\n        }\n        console.log(`invalid: ${coordinate}`)\n        return false\n    }\n    findCoords(index) {\n        if (index >= 0 && index < this.grid.length) {\n            return this.grid[index]\n        } else {\n            return 'Invalid index'\n        }\n    }\n} \n\nclass Ship {\n    constructor(shipType) {\n        this.ship = shipType\n        this.hitPoints = this.ship.length       \n        this.isSunk = false\n    }\n    hit() {\n        if(this.isSunk === true) {\n            return\n        }\n        this.hitPoints -= 1\n        if (this.hitPoints <= 0) {\n        this.isSunk = true\n        console.log(`You sunk my ${this.ship.name}!`)\n      }\n      return this.hitPoints\n    }    \n}\n\nclass Player {\n    constructor(name, ) {\n        this.name = name        \n        this.occupiedCoordinates = []\n        this.choosenCoordinates = []        \n        this.ships = this.createShips()\n    }\n    createShips() {\n        const ships = [\n            { name: 'Carrier', length: 5, shipLocation: [0,0,0,0,0], isHorizontal: true },     //ship 0\n            { name: 'Battleship', length: 4, shipLocation: [0,0,0,0], isHorizontal: true },    //ship 1\n            { name: 'Destroyer', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 2\n            { name: 'Submarine', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 3\n            { name: 'Patrol', length: 2, shipLocation: [0,0], isHorizontal: true }             //ship 4\n        ]\n        const playerShips = []\n        for(const ship of ships) {\n            playerShips.push(new Ship(ship))\n        }\n        return playerShips\n    }\n    fire(coords) {\n        for (let i = 0; i < this.choosenCoordinates.length; i++) {\n            if( coords === this.choosenCoordinates[i]) \n            return 'coordinates already been fired at'\n        } \n        this.choosenCoordinates.push(coords)    \n        return newGame.isHit(coords)\n        } \n    switchOrientation(shipIndex) {\n        const ship = this.ships[shipIndex].ship        \n        ship.isHorizontal = !ship.isHorizontal\n        console.log(ship.name, ship.isHorizontal)\n    }\n}\n    \n\n\n\nmodule.exports = {\n    Grid,\n    Player,\n    Ship,\n    Game,\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Game, Grid} from './script'\n\nfunction createtGame() {\n    return new Game()\n}\nconst newGame = createtGame()\nnewGame.startGame()\n\nconst containerDiv = document.getElementById('container')\nconst friendlyWaters = document.getElementById('friendlyWaters')\nconst enemyWaters = document.getElementById('enemyWaters')\n\nlet currentShip = null\nlet selectedSquare = null\n\nfunction labelGrid(alphaParent, numParent, parentTxt) {\n\n    const playerGrid = newGame.p1Board\n    const alphaCoords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n    const numCoords = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\n    for (let i = 0; i < 10; i++ ) {\n\n        const alphaSquare = document.createElement('div')\n        alphaSquare.id = `${parentTxt}gridSquare${i}`\n        alphaSquare.classList.add('alphaSquare')\n        alphaSquare.innerHTML = alphaCoords[i]\n        alphaParent.appendChild(alphaSquare)\n\n    }\n    for (let i = 0; i < 10; i++ ) {\n\n        const numSquare = document.createElement('div')\n        numSquare.id = `${parentTxt}gridSquare${i}`\n        numSquare.classList.add('numSquare')\n        numSquare.innerHTML = numCoords[i]\n        numParent.appendChild(numSquare)\n\n    }\n\n}\n\nfunction renderGrid(parent, parentTxt) {\n\n    const alphaDiv = document.createElement('div')\n    const numDiv = document.createElement('div')\n    alphaDiv.classList.add('alphaDiv')\n    numDiv.classList.add('numDiv')\n   \n    for (let i = 0; i < 100; i++) {\n\n        const coords = newGame.p1Board.findCoords(i)    \n        const gridSquare = document.createElement('div')\n        gridSquare.classList.add('gridSquare')\n        gridSquare.id = `${coords}-${parentTxt}`     \n        gridSquare.setAttribute('data-coords', coords)\n        console.log(`converted: ${convertCoordinatesToGrid(coords)}`)\n        gridSquare.style.gridArea =  convertCoordinatesToGrid(coords)  \n        parent.appendChild(gridSquare)\n\n    }\n\n    parent.appendChild(alphaDiv)\n    parent.appendChild(numDiv)\n    labelGrid(alphaDiv, numDiv, parentTxt)\n}\n\nfunction handleSquares() {\n\n    const gridSquares = document.querySelectorAll('.gridSquare')\n\n    gridSquares.forEach(square => {\n        const squareData = square.dataset.coords\n        const colNumber =squareData[1]\n        const rowNum = squareData[0]\n      \n        const coords = rowNum + colNumber\n            \n        square.addEventListener('click', ()  => {\n           console.log(squareData)\n           selectedSquare = squareData\n           \n        })\n        square.addEventListener('dragover', (e) => {\n            e.preventDefault()\n           \n        })\n        square.addEventListener('drop', (e) => {\n            e.preventDefault()\n\n            if (!newGame.p1Board.isValid(coords))return\n           \n            const currentShipIndex = getIndexFromName(currentShip)\n            const location = newGame.setLocation(newGame.player1, currentShipIndex, coords)\n            \n            console.log(location)\n            renderGridShip()  \n            setupGame() \n\n        })\n    })\n}\n\n//for ships\nconst convertVerticalToGrid = (coordinate) => {\n\n    const rowNum = parseInt(coordinate[0])\n    const colNum = parseInt(coordinate.slice(1))\n    console.log(`rowNum: ${rowNum}, colNum: ${typeof(colNum)}`)\n\n    const firstDigit = Math.floor(colNum / 10) + 1\n    const secondDigit = colNum % 10 + 1\n    console.log(`firstDigit: ${firstDigit}, secondDigit: ${secondDigit}`)\n\n    const rowStart = firstDigit\n    const rowEnd = rowStart \n    const colStart = secondDigit\n    const colEnd = colStart\n    console.log(`${rowStart} / ${colStart} / ${rowEnd} / ${colEnd}`)\n    return `${rowStart} / ${colStart} / ${rowEnd} / ${colEnd}`\n}\nconst convertHorizontalToGrid = (coordinate) => {\n\n    const rowNum = parseInt(coordinate[0])\n    const colNum = parseInt(coordinate.slice(1))\n    console.log(`rowNum: ${rowNum}, colNum: ${typeof(colNum)}`)\n\n    const firstDigit = Math.floor(colNum / 10) + 1\n    const secondDigit = colNum % 10\n    console.log(`firstDigit: ${firstDigit}, secondDigit: ${secondDigit}`)\n\n    const rowStart = firstDigit\n    const rowEnd = rowStart + 1\n    const colStart = secondDigit\n    const colEnd = colStart + 1\n    console.log(`${rowStart} / ${colStart} / ${rowEnd} / ${colEnd}`)\n    return `${rowStart} / ${colStart} / ${rowEnd} / ${colEnd}`\n}\n//for grid squares\nconst convertCoordinatesToGrid = (coordinate) => {\n\n    let rowNum = parseInt(coordinate[0])\n    rowNum++\n    let columnNum = (parseInt(coordinate.slice(1)))\n    columnNum++\n\n    const rowStart = rowNum\n    const rowEnd = rowStart + 1\n    const columnStart = columnNum\n    const columnEnd = columnStart + 1\n    console.log( `${rowStart} / ${columnStart} / ${rowEnd} / ${columnEnd}`)\n    return `${rowStart} / ${columnStart} / ${rowEnd} / ${columnEnd}`\n}\n\nconst capFirstLetter = (inputString) => {\n    const [firstLetter, ...rest] = inputString\n    return `${firstLetter.toUpperCase()}${rest.join('')}`\n}\n\nfunction getIndexFromName(shipName) {\n\n    console.log(shipName)\n    if (shipName === null) return\n\n    let upperCaseName = capFirstLetter(shipName)\n    const ships = newGame.player1.ships\n    for (let i = 0; i < ships.length; i++) {\n       if (ships[i].ship.name === upperCaseName) {\n        return i\n       }\n    }\n   \n}\n\nconst renderGridShip = () => {\n    const shipImages = [\n        {\n            id: 'carrier', \n            src: \"images/carrier.png\",\n            alt: \"carrier-icon\"\n        },\n        {\n            id: 'battleship', \n            src: \"images/battleship.png\",\n            alt: \"battleship-icon\"\n        },\n        {\n            id: 'destroyer', \n            src: \"images/destroyer.png\",\n            alt: \"destroyer-icon\"\n        },\n        {\n            id: 'submarine', \n            src: \"images/submarine.png\",\n            alt: \"submarine-icon\"\n        },\n        {\n            id: 'patrol', \n            src: \"images/patrol.png\",\n            alt: \"patrol-icon\"\n        }\n]\n    \n    //remove duplicates\n    const prevShips = document.querySelectorAll('.ship-icon')    \n    for (const el of prevShips) {\n        el.remove()\n    }\n    const prevGridShip = document.querySelectorAll('.gridShip')\n    for (const el of prevGridShip) {\n        el.remove()\n    }\n    // unplaced ships initialize to dryDock div\n    const p1Ships = newGame.player1.ships\n    const dryDock = document.createElement('div')\n    dryDock.className = 'dry-dock'\n    containerDiv.appendChild(dryDock)\n    //loop ship images rendering into different parent based on coordinates\n    for (let i = 0; i < shipImages.length; i++) {\n        \n        const shipsCoords = p1Ships[i].ship.shipLocation\n        console.log(shipsCoords)\n        let shipIsHorizontal = p1Ships[i].ship.isHorizontal\n        console.log(p1Ships[i].ship.name,'ship horizonal', shipIsHorizontal)\n        const shipImage = document.createElement('img')\n        shipImage.id = shipImages[i].id\n        shipImage.src = shipImages[i].src\n        shipImages.alt = shipImages[i].alt\n        shipImage.style.width = (p1Ships[i].ship.length * 45) + 'px'\n    \n        // unplaced ships Coords are initialized as all 0's\n        console.log(`shipsCoords[1]: ${shipsCoords[1]}, ${shipsCoords[1] == 0}`)\n        if (shipsCoords[1] == 0) {\n\n            console.log('No coordinates set for ship')  \n            shipImage.classList.add('ship-icon')\n            dryDock.appendChild(shipImage)       \n\n            continue\n        }\n        // convert board coordinates to css grid values to place ships on board\n        console.log(`shipsCoords: ${shipsCoords}`)\n        let gridAreaValue = null    \n        shipImage.className = 'gridShip'   \n       \n        if (shipIsHorizontal) {\n            shipImage.classList.remove('rotate')           \n            gridAreaValue = convertHorizontalToGrid(shipsCoords)\n\n        } else {\n            shipImage.classList.add('rotate')           \n            gridAreaValue = convertVerticalToGrid(shipsCoords)\n\n        }    \n        console.log('ship horizonal', shipIsHorizontal, 'grid area', gridAreaValue)\n        \n        shipImage.style.gridArea = gridAreaValue\n        friendlyWaters.appendChild(shipImage)\n    }\n    addShipListeners()\n  \n}\nfunction setupGame() {\n\n    const instructionsDiv = document.getElementById('instructions')\n    instructionsDiv.textContent = `Drag & drop ships on grid. Double click to rotate.`\n\n    const unplacedShips = document.querySelectorAll('.ship-icon')\n    console.log(`length: ${unplacedShips.length}`)\n    if (unplacedShips.length < 1) {\n\n        //remove instructions\n        instructionsDiv.innerHTML = ''\n\n        const startBtn = document.createElement('button')\n        startBtn.textContent = `Start Game`\n        instructionsDiv.appendChild(startBtn)\n\n        startBtn.addEventListener('click', () => {\n            \n            currentShip = null\n\n        })\n    }\n    \n       \n    \n}\nfunction fireAt() {\n\n}\nfunction addShipListeners() {\n\n    const dryShipImg = document.querySelectorAll('.ship-icon')\n\n    for (const ship of dryShipImg) {\n\n        const capitalizedName = capFirstLetter(ship.id)\n        ship.addEventListener('mousedown', () => {\n            console.log(capitalizedName)\n            currentShip = capitalizedName\n        })\n        \n        ship.addEventListener('dblclick', () => {\n    \n            const shipIndex = getIndexFromName(capitalizedName)\n            const p1 = newGame.player1\n            \n            console.log(p1.ships[shipIndex].ship.isHorizontal)\n            p1.switchOrientation(shipIndex)\n            if (p1.ships[shipIndex].ship.isHorizontal) {\n                ship.classList.remove('rotate')\n                \n            } else {\n               \n                ship.classList.add('rotate')\n            }\n            \n            console.log(ship.id, p1.ships[shipIndex].ship.isHorizontal)\n        })\n    }\n    \n}\n\nconst testShip1 = newGame.player1.ships[0].ship\n\nconst testShip2 = newGame.player1.ships[1].ship\n\nconst testShip3 = newGame.player1.ships[2].ship\nconst testShip4 = newGame.player1.ships[3].ship\nconst testShip5 = newGame.player1.ships[4].ship\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    \n    renderGrid(enemyWaters, 'hidden')\n    renderGrid(friendlyWaters, 'revealed')\n    \n\ngetIndexFromName('Carrier')\n\n// placeHorizontalShip(testShip1, 'a1')    \n// placeHorizontalShip(testShip2, 'b3')\n// placeHorizontalShip(testShip3, 'c5')\n// placeHorizontalShip(testShip4, 'j10')\n// placeHorizontalShip(testShip5, 'h2')\n// placeVerticalShip(testShip1, 'e7')\n\nhandleSquares()\n\n// newGame.setPlayer()\n// console.log(newGame.setLocation(newGame.player1, 0, 45))\nrenderGridShip()\naddShipListeners()\nsetupGame()\nif( newGame.currentPlayer === newGame.player1) {\n    newGame.playRound(52)\n} else {\n    const randomCoord = newGame.getRandomCoord()\n    newGame.playRound(randomCoord)\n}\n\n\n })\n\n"],"names":[],"sourceRoot":""}