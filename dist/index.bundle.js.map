{"version":3,"file":"index.bundle.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,iBAAiB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,iBAAiB;;AAEzC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,qCAAqC,2BAA2B;AAChE;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,uBAAuB;AACxD,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA,uCAAuC,YAAY;AACnD,kDAAkD,iBAAiB,IAAI,YAAY;AACnF,yCAAyC,kCAAkC,IAAI,YAAY;AAC3F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA,wBAAwB,qBAAqB;AAC7C,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA,+CAA+C,OAAO,cAAc,eAAe;AACnF,uCAAuC,yBAAyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C,4BAA4B,uBAAuB;AACnD,6BAA6B,cAAc,EAAE,cAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,IAAI,SAAS,IAAI;AAC7C;AACA,kCAAkC,WAAW;AAC7C;AACA;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAA2E;AACzF,cAAc,4EAA4E;AAC1F,cAAc,yEAAyE;AACvF,cAAc,yEAAyE;AACvF,cAAc,iFAAiF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACtRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UClEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACN8B;AACM;;AAEpC,oBAAoB,yCAAI;AACxB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,oBAAoB,QAAQ;;AAE5B;AACA,4BAA4B,UAAU,YAAY,EAAE;AACpD;AACA;AACA;;AAEA;AACA,oBAAoB,QAAQ;;AAE5B;AACA,0BAA0B,UAAU,YAAY,EAAE;AAClD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;;AAE7B;AACA;AACA;AACA,2BAA2B,OAAO,GAAG,UAAU;AAC/C;AACA,qCAAqC,iCAAiC;AACtE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW,SAAS,MAAM;AACzD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;AACT,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,kBAAkB;AACxD;;AAEA;AACA;AACA,+BAA+B,WAAW,kBAAkB,aAAa;;AAEzE;AACA;AACA,+BAA+B,WAAW,eAAe,UAAU;;AAEnE;AACA;AACA;AACA,+BAA+B,WAAW,iBAAiB,YAAY;;AAEvE;AACA;AACA,6BAA6B,SAAS,cAAc,SAAS;;AAE7D;AACA;AACA,2BAA2B,OAAO,YAAY,OAAO;;AAErD,+BAA+B,WAAW;AAC1C,mBAAmB,UAAU,IAAI,UAAU,IAAI,QAAQ,IAAI,OAAO;AAClE,cAAc,UAAU,IAAI,UAAU,IAAI,QAAQ,IAAI,OAAO;AAC7D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,UAAU,IAAI,aAAa,IAAI,QAAQ,IAAI,UAAU;AAC5E,cAAc,UAAU,IAAI,aAAa,IAAI,QAAQ,IAAI,UAAU;AACnE;;AAEA;AACA;AACA,cAAc,0BAA0B,EAAE,cAAc;AACxD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,uBAAuB;;AAE3C;AACA;;AAEA;AACA;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,2BAA2B,qBAAqB;AAChD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAS;AACT;;AAEA;;AAEA;;AAEA;AACA,0BAA0B,2BAA2B;;;AAGrD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC,2CAA2C;AACpF,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,2BAA2B;AAChE;AACA,qCAAqC,2BAA2B;AAChE;AACA,qCAAqC,2BAA2B;;;AAGhE,EAAE","sources":["webpack://battle-ship/./src/script.js","webpack://battle-ship/../../../node_modules/us-states/index.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/webpack/runtime/compat get default export","webpack://battle-ship/webpack/runtime/define property getters","webpack://battle-ship/webpack/runtime/hasOwnProperty shorthand","webpack://battle-ship/webpack/runtime/make namespace object","webpack://battle-ship/./src/index.js"],"sourcesContent":["class Game {\n    constructor() {\n        this.player1 = new Player('player1')\n        this.player2 = new Player('player2')        \n        this.currentPlayer = this.player1\n        this.otherPlayer = this.player2\n        this.p1Board = new Grid()        \n        this.p2Board = new Grid()\n        this.gameOver = false\n    }\n    startGame() {\n\n        // start new game\n        this.setAIShips()\n    \n    } \n    togglePlayer() {\n        [this.currentPlayer, this.otherPlayer] = [this.otherPlayer, this.currentPlayer]\n    }\n    placeShips(isPlayer1, shipIndex, coordiantes) {\n        const player = isPlayer1 ? this.player1 : this.player2\n        const ship = player.ships[shipIndex].ship\n        const location = ship.shipLocation\n        const isHorizontal = ship.isHorizontal\n\n        for (let i = 0; i < ship.length; i++) {\n\n            location[i] = isHorizontal ? coordiantes + i : coordiantes + (i * 10)\n    \n        }\n        return location\n    }\n    setAILocation(shipIndex, coordiantes) {\n        const ship = this.player2.ships[shipIndex].ship\n        const location = ship.shipLocation\n        const isHorizontal = ship.isHorizontal\n\n        for (let i = 0; i < ship.length; i++) {\n\n            location[i] = isHorizontal ? coordiantes + i : coordiantes + (i * 10)\n\n        }\n        return location\n    }\n    setLocation(player, shipIndex, coordinate) {\n\n        const ship = player.ships[shipIndex].ship\n        const location = ship.shipLocation    \n        const length = ship.length   \n        const midIndex = Math.ceil(length / 2) - 1\n\n       for (let i = 0; i < length; i++) {        \n        if (ship.isHorizontal) {\n            location[i] = (coordinate - midIndex) + i\n            \n        } else { //vertical\n            location[i] = (coordinate - (midIndex * 10)) + (i * 10)\n        }        \n       }\n        console.log(`location: ${location}`)\n        return location\n    }\n    isDuplicate(player, location) {\n\n        const isOccupied = player.occupiedCoordinates.some(occupiedLocation => {\n            return occupiedLocation.some(occupiedCoordinate => location.includes(occupiedCoordinate))\n        })\n        if (!isOccupied) {\n            player.occupiedCoordinates.push(location)\n            console.log(`occupied: ${player.occupiedCoordinates}`)\n           return  false\n        } else {\n            console.log(`duplicate found`)\n            return true\n        }\n    }\n    getRandomCoord() {\n\n        return Math.floor(Math.random() * 99)\n    }\n    setAIShips() {\n\n        const ai = this.player2\n        const aiShips = ai.ships\n\n        //empty the array \n        ai.occupiedCoordinates.length = 0\n        let location = null\n               \n        for (let i = 0; i < aiShips.length; i++) {\n            // randomize isHorizontal   \n            const randomBoolean = Math.random() < 0.5\n            aiShips[i].ship.isHorizontal = randomBoolean\n\n            // random coordinates\n            const randomCoord = this.getRandomCoord()\n            const randomCoord2 = this.getRandomCoord()\n            \n            location = this.setAILocation(i, randomCoord)\n            \n            //check for invalid coordiantes\n            const isDuplicateFound = this.isDuplicate(ai, location)\n            let validCoords = this.checkValidity()\n            while (!validCoords) {\n                location = this.setAILocation(i, randomCoord2)\n            }\n\n        }\n        console.log(`occupied: ${ai.occupiedCoordinates}`)\n        console.log(`location: ${location}`)     \n        return location\n    }\n    checkValidity() {\n        for (let j = 0; j < location.length; j++) {               \n            //if coordinates are invalid or already occupied try again\n             if (this.p1Board.isValid(location[j]) === false || isDuplicateFound ) {                 \n                 console.log(`retry: ${location[j]}`)\n                 console.log(`isDuplicateFound: ${isDuplicateFound}, ${location[j]}`)\n                 console.log(`isValid: ${this.p1Board.isValid(location[j])}, ${location[j]}`)\n                return false\n             }\n         }\n         return true\n    }\n    linkCells(value) {\n\n        const isLastCol = value % 10 === 9\n        const isFirstCol = value % 10 === 0\n        const isTopRow = value >= 0\n        const isBottomRow = value <= 99\n        return {\n            cell: value,\n            prevHorizontal: isFirstCol ? null : value - 1,\n            nextHorizontal: isLastCol ? null : value + 1,\n            prevVertical: isTopRow ? value - 10 : null,\n            nextVertical: isBottomRow ? value + 10 : null\n        }\n    }     \n\n    // isHit(coords) {\n\n    //     const occupied = this.otherPlayer.occupiedCoordinates\n    //     const includesCoords = occupied.includes(coords)\n    \n    //     return includesCoords  \n    // }\n    isHit(coords) {\n        const occupied = this.otherPlayer.occupiedCoordinates\n        console.log(`${this.otherPlayer.name}`)\n        \n        for (let i = 0; i < occupied.length; i++) {\n            for (let j = 0; j < occupied[i].length; j++) {\n                \n                if (coords === occupied[i][j]) {\n                    if (!occupied[i][j].isHit) {\n                        console.log(`coords: ${coords}, occupied: ${occupied[i][j]}`)\n                console.log(`coords: ${coords == occupied[i][j]}`)\n                        this.otherPlayer.ships[i].hit()\n                        occupied[i][j].isHit = true\n                        return true\n                    }\n                }\n            }\n        }\n\n        return false\n    }\n    isGameOver() {\n        \n        //if otherplayer .ships[i].isSunk game is over\n        for (let i = 0; i < this.otherPlayer.ships.length; i++) {\n            if (this.otherPlayer.ships[i].isSunk === true) {\n              return  this.gameOver = true\n\n            }\n        }\n      return  this.gameOver = false\n    }\n}\n\nclass Grid {\n    constructor() {\n        this.yAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.xAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.grid = this.createGrid()\n    }\n    createGrid() {\n        const grid = []\n\n        for (let i = 0; i < this.yAxis.length; i++) {\n            for (let j = 0; j < this.xAxis.length; j++) {\n                grid.push(`${this.yAxis[i]}${this.xAxis[j]}`)\n            }\n        }\n        \n        return grid\n    }\n    isValid(coordinate) {\n        const row = Math.floor(coordinate / 10)\n        const col = coordinate % 10\n        console.log(`row: ${row}, col: ${col}`)\n        if (row >= 0 && row < 10 && col >= 0 && col < 10 ) {\n            console.log(`valid: ${coordinate}`)\n            return true\n        }\n        console.log(`invalid: ${coordinate}`)\n        return false\n    }\n    findCoords(index) {\n        if (index >= 0 && index < this.grid.length) {\n            return this.grid[index]\n        } else {\n            return 'Invalid index'\n        }\n    }\n} \n\nclass Ship {\n    constructor(shipType) {\n        this.ship = shipType\n        this.hitPoints = this.ship.length       \n        this.isSunk = false\n    }\n    hit() {\n        console.log()\n        if(this.isSunk === true) {\n            return\n        }\n        this.hitPoints -= 1\n        if (this.hitPoints <= 0) {\n        this.isSunk = true\n        console.log(`You sunk my ${this.ship.name}!`)\n      }\n      return this.hitPoints\n    }    \n}\n\nclass Player {\n    constructor(name, ) {\n        this.name = name        \n        this.occupiedCoordinates = []\n        this.choosenCoordinates = []        \n        this.ships = this.createShips()\n        \n    }\n    createShips() {\n        const ships = [\n            { name: 'Carrier', length: 5, shipLocation: [0,0,0,0,0], isHorizontal: true },     //ship 0\n            { name: 'Battleship', length: 4, shipLocation: [0,0,0,0], isHorizontal: true },    //ship 1\n            { name: 'Destroyer', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 2\n            { name: 'Submarine', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 3\n            { name: 'Patrol', length: 2, shipLocation: [0,0], isHorizontal: true }             //ship 4\n        ]\n        const playerShips = []\n        for(const ship of ships) {\n            playerShips.push(new Ship(ship))\n        }\n        return playerShips\n    }\n    fire(coords) {\n        this.choosenCoordinates.push(coords)\n        return coords\n    } \n    switchOrientation(shipIndex) {\n        const ship = this.ships[shipIndex].ship        \n        ship.isHorizontal = !ship.isHorizontal\n        console.log(ship.name, ship.isHorizontal)\n    }\n}\n    \n\n\n\nmodule.exports = {\n    Grid,\n    Player,\n    Ship,\n    Game,\n}","module.exports = {\n  AA: 'Armed Forces Americas (except Canada)',\n  AE: 'Armed Forces Africa',\n  AE: 'Armed Forces Canada',\n  AE: 'Armed Forces Europe',\n  AE: 'Armed Forces Middle East',\n  AK: 'Alaska',\n  AL: 'Alabama',\n  AP: 'Armed Forces Pacific',\n  AR: 'Arkansas',\n  AS: 'American Samoa',\n  AZ: 'Arizona',\n  CA: 'California',\n  CO: 'Colorado',\n  CT: 'Connecticut',\n  DC: 'District of Columbia',\n  DE: 'Delaware',\n  FL: 'Florida',\n  FM: 'Federated States of Micronesia',\n  GA: 'Georgia',\n  GU: 'Guam',\n  HI: 'Hawaii',\n  IA: 'Iowa',\n  ID: 'Idaho',\n  IL: 'Illinois',\n  IN: 'Indiana',\n  KS: 'Kansas',\n  KY: 'Kentucky',\n  LA: 'Louisiana',\n  MA: 'Massachusetts',\n  MD: 'Maryland',\n  ME: 'Maine',\n  MH: 'Marshall Islands',\n  MI: 'Michigan',\n  MN: 'Minnesota',\n  MO: 'Missouri',\n  MP: 'Northern Mariana Islands',\n  MS: 'Mississippi',\n  MT: 'Montana',\n  NC: 'North Carolina',\n  ND: 'North Dakota',\n  NE: 'Nebraska',\n  NH: 'New Hampshire',\n  NJ: 'New Jersey',\n  NM: 'New Mexico',\n  NV: 'Nevada',\n  NY: 'New York',\n  OH: 'Ohio',\n  OK: 'Oklahoma',\n  OR: 'Oregon',\n  PA: 'Pennsylvania',\n  PR: 'Puerto Rico',\n  PW: 'Palau',\n  RI: 'Rhode Island',\n  SC: 'South Carolina',\n  SD: 'South Dakota',\n  TN: 'Tennessee',\n  TX: 'Texas',\n  UT: 'Utah',\n  VA: 'Virginia',\n  VI: 'Virgin Islands',\n  VT: 'Vermont',\n  WA: 'Washington',\n  WI: 'Wisconsin',\n  WV: 'West Virginia',\n  WY: 'Wyoming'\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { MA } from 'us-states'\nimport { Game, Grid} from './script'\n\nconst newGame = new Game()\nnewGame.startGame()\n\nconst containerDiv = document.getElementById('container')\nconst friendlyWaters = document.getElementById('friendlyWaters')\nconst enemyWaters = document.getElementById('enemyWaters')\n\nlet currentShip = null\nlet selectedSquare = null\n\nfunction labelGrid(alphaParent, numParent, parentTxt) {\n\n    const playerGrid = newGame.p1Board\n    const alphaCoords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n    const numCoords = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\n    for (let i = 0; i < 10; i++ ) {\n\n        const alphaSquare = document.createElement('div')\n        alphaSquare.id = `${parentTxt}gridSquare${i}`\n        alphaSquare.classList.add('alphaSquare')\n        alphaSquare.innerHTML = alphaCoords[i]\n        alphaParent.appendChild(alphaSquare)\n\n    }\n    for (let i = 0; i < 10; i++ ) {\n\n        const numSquare = document.createElement('div')\n        numSquare.id = `${parentTxt}gridSquare${i}`\n        numSquare.classList.add('numSquare')\n        numSquare.innerHTML = numCoords[i]\n        numParent.appendChild(numSquare)\n\n    }\n\n}\n\nfunction renderGrid(parent, parentTxt) {\n\n    const alphaDiv = document.createElement('div')\n    const numDiv = document.createElement('div')\n    alphaDiv.classList.add('alphaDiv')\n    numDiv.classList.add('numDiv')\n   \n    for (let i = 0; i < 100; i++) {\n\n        const coords = newGame.p1Board.findCoords(i)    \n        const gridSquare = document.createElement('div')\n        gridSquare.classList.add('gridSquare')\n        gridSquare.id = `${coords}-${parentTxt}`     \n        gridSquare.setAttribute('data-coords', coords)\n        // console.log(`converted: ${convertCoordinatesToGrid(coords)}`)\n        gridSquare.style.gridArea =  convertCoordinatesToGrid(coords)  \n        parent.appendChild(gridSquare)\n\n    }\n\n    parent.appendChild(alphaDiv)\n    parent.appendChild(numDiv)\n    labelGrid(alphaDiv, numDiv, parentTxt)\n}\n\nfunction handleSquares() {\n\n    const ships = newGame.player1.ships\n    for (let i = 0; i < ships.length; i++) {\n        console.log(ships[i].ship)\n    }\n    \n\n    const gridSquares = document.querySelectorAll('.gridSquare')\n\n    gridSquares.forEach(square => {\n        const squareData = square.dataset.coords\n        const colNumber =squareData[1]\n        const rowNum = squareData[0]\n      \n        const coords = rowNum + colNumber\n\n        \n            \n        square.addEventListener('click', ()  => {\n            console.log(squareData)\n            selectedSquare = squareData\n            const isHit = newGame.isHit(coords)\n            console.log(`id: ${square.id} isHit: ${isHit}`)\n            markSquare(square.id, isHit)\n            \n        })\n        square.addEventListener('dragover', (e) => {\n            e.preventDefault()\n           \n        })\n        square.addEventListener('drop', (e) => {\n            e.preventDefault()\n\n            if (!newGame.p1Board.isValid(coords))return\n           \n            const currentShipIndex = getIndexFromName(currentShip)\n            const location = newGame.setLocation(newGame.player1, currentShipIndex, coords)\n            \n            console.log(location)\n            renderAllShips()  \n            setupGame() \n\n        })\n    })\n}\nconst markSquare = (squareId, isHit) => {\n\n    const selected = document.getElementById(squareId)\n\n    const peg = document.createElement('div')\n    peg.style.backgroundColor = isHit ? 'red' : 'blue'\n    peg.classList.add('peg')\n   \n\n   selected.appendChild(peg)\n}\n//for ships\nconst convertToGrid = (coordiante, ship) => {\n    console.log(`coordinate length: ${coordiante.length}`)\n    const lastIndex = coordiante.length - 1\n\n    const shipLength = ship.length\n    const isHorizontal = ship.isHorizontal\n    console.log(`shipLength: ${shipLength}, isHorizontal: ${isHorizontal}`)\n\n    const firstCoord = Math.floor(Number(coordiante[0]))\n    const lastCoord = Math.floor(coordiante[lastIndex])\n    console.log(`firstCoord: ${firstCoord}, lastCoord: ${lastCoord}`)\n\n    \n    const firstDigit = isHorizontal ? Math.floor(firstCoord / 10) : Math.floor(lastCoord / 10) \n    const secondDigit = isHorizontal ?  firstCoord % 10 : lastCoord % 10     \n    console.log(`firstDigit: ${firstDigit}, secondDigit: ${secondDigit}`)\n\n    const rowStart =firstDigit + 1\n    const colStart = secondDigit + 1\n    console.log(`rowStart: ${rowStart}, colStart: ${colStart}`)\n\n    const rowEnd = isHorizontal ? rowStart + shipLength - 1 : rowStart\n    const colEnd = isHorizontal ? colStart  + shipLength : colStart\n    console.log(`rowEnd: ${rowEnd}, colEnd: ${colEnd}`) \n\n    console.log(`coordinate: ${coordiante}`)\n    console.log(`${rowStart} / ${colStart} / ${rowEnd} / ${colEnd}`)\n    return `${rowStart} / ${colStart} / ${rowEnd} / ${colEnd}`\n}\n\n//for grid squares\nconst convertCoordinatesToGrid = (coordinate) => {\n\n    let rowNum = coordinate[0]\n    rowNum++\n    let columnNum = coordinate[1]\n    columnNum++\n\n    const rowStart = rowNum\n    const rowEnd = rowStart + 1\n    const columnStart = columnNum\n    const columnEnd = columnStart + 1\n    // console.log( `${rowStart} / ${columnStart} / ${rowEnd} / ${columnEnd}`)\n    return `${rowStart} / ${columnStart} / ${rowEnd} / ${columnEnd}`\n}\n\nconst capFirstLetter = (inputString) => {\n    const [firstLetter, ...rest] = inputString\n    return `${firstLetter.toUpperCase()}${rest.join('')}`\n}\n\nfunction getIndexFromName(shipName) {\n\n    console.log(shipName)\n    if (shipName === null) return\n\n    let upperCaseName = capFirstLetter(shipName)\n    const ships = newGame.player1.ships\n    for (let i = 0; i < ships.length; i++) {\n       if (ships[i].ship.name === upperCaseName) {\n        return i\n       }\n    }\n   \n}\nconst renderShips = (isPlayer1) => {\n\n    const shipImages = [\n        {\n            id: 'carrier', \n            src: \"images/carrier.png\",\n            alt: \"carrier-icon\"\n        },\n        {\n            id: 'battleship', \n            src: \"images/battleship.png\",\n            alt: \"battleship-icon\"\n        },\n        {\n            id: 'destroyer', \n            src: \"images/destroyer.png\",\n            alt: \"destroyer-icon\"\n        },\n        {\n            id: 'submarine', \n            src: \"images/submarine.png\",\n            alt: \"submarine-icon\"\n        },\n        {\n            id: 'patrol', \n            src: \"images/patrol.png\",\n            alt: \"patrol-icon\"\n        }\n    ]\n\n    const dryDock = document.createElement('div')\n    dryDock.className = 'dry-dock'\n    containerDiv.appendChild(dryDock)\n\n    for (let i = 0; i < shipImages.length; i++) {\n\n        const shipData = isPlayer1 \n        ? newGame.player1.ships[i].ship : newGame.player2.ships[i].ship\n\n        const shipCoord = shipData.shipLocation\n        const isHorizontal = shipData.isHorizontal\n      \n        const shipImage = document.createElement('img')\n        shipImage.id = isPlayer1 ? shipImages[i].id : `enemy-${shipImages[i].id}`\n        shipImage.src = shipImages[i].src\n        shipImages.alt = shipImages[i].alt\n        shipImage.style.width = (shipData.length * 45) + 'px'\n\n        let gridAreaValue = convertToGrid(shipCoord, shipData)\n        console.log(`isHorizontal: ${isHorizontal}`)\n        if (isHorizontal) {\n            shipImage.classList.remove('rotate')\n            // gridAreaValue = convertHorizontalToGrid(shipCoord)\n        } else {\n            shipImage.classList.add('rotate')           \n            // gridAreaValue = convertVerticalToGrid(shipCoord)\n        }\n        shipImage.style.gridArea = gridAreaValue\n        \n        if (isPlayer1) {\n            let isNotSet = (shipCoord[1] == 0)\n            isNotSet ? shipImage.classList.add('ship-icon') : shipImage.classList.add('gridShip')\n            isNotSet ? dryDock.appendChild(shipImage) : friendlyWaters.appendChild(shipImage)       \n        } else {\n            shipImage.classList.add('enemyShip')\n            enemyWaters.appendChild(shipImage)\n        }\n    }\n}\nconst removeElements = (elements) => {    \n    for (const el of elements) \n        el.remove()\n}\nconst renderAllShips = () => {\n\n    //remove dry dock\n    const prevDock = document.querySelectorAll('.dry-dock')\n    removeElements(prevDock)\n\n    //remove previous ships\n    const prevShips = document.querySelectorAll('.ship-icon')    \n    removeElements(prevShips)\n\n    const prevGridShip = document.querySelectorAll('.gridShip')\n    removeElements(prevGridShip)\n\n    const prevEnemyShip = document.querySelectorAll('.enemyShip')\n    removeElements(prevEnemyShip)\n\n    //player1\n    renderShips(true)\n    //player2\n    renderShips(false)\n\n    addShipListeners()\n}\n\nfunction setupGame() {\n\n    const instructionsDiv = document.getElementById('instructions')\n    instructionsDiv.textContent = messages.startingInstruction\n\n    const unplacedShips = document.querySelectorAll('.ship-icon')\n    console.log(`length: ${unplacedShips.length}`)\n    if (unplacedShips.length < 1) {\n\n        //remove instructions\n        instructionsDiv.innerHTML = ''\n\n        const startBtn = document.createElement('button')\n        startBtn.textContent = `Start Game`\n        instructionsDiv.appendChild(startBtn)\n\n        startBtn.addEventListener('click', () => {\n            \n            currentShip = null\n            instructionsDiv.textContent = messages.currentPlayerTurn\n\n        })\n    }\n\n}\n\nconst messages = {\n\n    startingInstruction: `Drag & drop ships on grid. Double click to rotate.`,\n    currentPlayerTurn: `${newGame.currentPlayer.name}'s Turn`,\n\n\n}\nfunction addShipListeners() {\n\n    const dryShipImg = document.querySelectorAll('.ship-icon')\n\n    for (const ship of dryShipImg) {\n\n        const capitalizedName = capFirstLetter(ship.id)\n        ship.addEventListener('mousedown', () => {\n            currentShip = capitalizedName\n        })\n        \n        ship.addEventListener('dblclick', () => {\n    \n            const shipIndex = getIndexFromName(capitalizedName)\n            const player1 = newGame.player1\n            \n            player1.switchOrientation(shipIndex)\n\n            let isHorizontal = player1.ships[shipIndex].ship.isHorizontal            \n            isHorizontal = !isHorizontal\n            renderAllShips()\n      \n            console.log(`isHorizontal: ${player1.ships[shipIndex].ship.isHorizontal}`)\n        })\n    \n    }\n    \n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    \n    renderGrid(enemyWaters, 'hidden')\n    renderGrid(friendlyWaters, 'revealed')\n    handleSquares()\n    setupGame()\n    renderAllShips()\n    addShipListeners()\n  \n\n    // console.log(`current player ${newGame.currentPlayer.name}`)\n    // newGame.togglePlayer()\n    // console.log(`current player ${newGame.currentPlayer.name}`)\n    // newGame.togglePlayer()\n    // console.log(`current player ${newGame.currentPlayer.name}`)\n\n\n })\n\n"],"names":[],"sourceRoot":""}