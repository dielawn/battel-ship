{"version":3,"file":"index.bundle.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,qBAAqB;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C,4BAA4B,uBAAuB;AACnD,6BAA6B,cAAc,EAAE,cAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAA2E;AACzF,cAAc,4EAA4E;AAC1F,cAAc,yEAAyE;AACvF,cAAc,yEAAyE;AACvF,cAAc,iFAAiF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;;AAEA,wBAAwB,uBAAuB;AAC/C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCjSA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACLsD;;AAEtD,oBAAoB,yCAAI;AACxB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,oBAAoB,QAAQ;;AAE5B;AACA,4BAA4B,UAAU,YAAY,EAAE;AACpD;AACA;AACA;;AAEA;AACA,oBAAoB,QAAQ;;AAE5B;AACA,0BAA0B,UAAU,YAAY,EAAE;AAClD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;;AAE7B;AACA;AACA;AACA,2BAA2B,OAAO,GAAG,UAAU;AAC/C;AACA,qCAAqC,iCAAiC;AACtE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,MAAM;AACN;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,2BAA2B;AAChE,kCAAkC,2BAA2B;;AAE7D;AACA,8BAA8B,UAAU;;AAExC;AACA,6BAA6B,qDAAgB;AAC7C;AACA,iDAAiD,OAAO;AACxD,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAc,UAAU,IAAI,UAAU,IAAI,QAAQ,IAAI,OAAO;AAC7D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,UAAU,IAAI,aAAa,IAAI,QAAQ,IAAI,UAAU;AAC5E,cAAc,UAAU,IAAI,aAAa,IAAI,QAAQ,IAAI,UAAU;AACnE;;AAEA;AACA;AACA,cAAc,0BAA0B,EAAE,cAAc;AACxD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,uBAAuB;;AAE3C;AACA;;AAEA;AACA;AACA;AACA;AACA,+DAA+D,iBAAiB;AAChF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE;AACA;AACA,SAAS;;AAET;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC,kCAAkC,SAAS;AAC3C;AACA;AACA,+BAA+B,SAAS;AACxC;AACA;;AAEA;AACA,0BAA0B,2BAA2B;;;AAGrD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC,2CAA2C;AACpF,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,2BAA2B;AAChE;AACA,qCAAqC,2BAA2B;AAChE;AACA,qCAAqC,2BAA2B;;;AAGhE,EAAE","sources":["webpack://battle-ship/./src/script.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/webpack/runtime/compat get default export","webpack://battle-ship/webpack/runtime/define property getters","webpack://battle-ship/webpack/runtime/hasOwnProperty shorthand","webpack://battle-ship/webpack/runtime/make namespace object","webpack://battle-ship/./src/index.js"],"sourcesContent":["class Game {\n    constructor() {\n        this.player1 = new Player('player1')\n        this.player2 = new Player('player2')        \n        this.currentPlayer = this.player1\n        this.otherPlayer = this.player2\n        this.p1Board = new Grid()\n        this.gameOver = false\n    }\n    startGame() {\n\n        // start new game\n        \n        this.player1.autoPlaceShips()\n        this.player2.autoPlaceShips()\n        \n    } \n    togglePlayer() {\n        [this.currentPlayer, this.otherPlayer] = [this.otherPlayer, this.currentPlayer]\n        return this.currentPlayer\n    }       \n    aiShotLogic() {\n\n        const newCoord  = new AiCoordGenerator()\n        console.log(`UsedNumbers: ${newCoord.usedNumbers}`)\n        let randomNum = newCoord.getRandomUniqueNumber()\n\n       \n        return randomNum\n       \n    }\n    \n    isGameOver() {\n\n        if (this.player1.isGameOver()) {\n            console.log(`player2 has won the game!`)\n            this.gameOver = true\n            return true\n        }\n        if (this.player2.isGameOver()) {\n            console.log(`player1 has won the game!`)\n            this.gameOver = true\n            return true\n        } \n\n        return false \n    }\n}\nclass AiCoordGenerator {\n    constructor() {\n        this.usedNumbers = new Set()\n    }\n    reset() {\n        this.usedNumbers.clear()\n    }\n    getRandomUniqueNumber() {\n        const min = 0\n        const max = 99\n        let randomNum \n\n        do {\n            randomNum = Math.floor(Math.random() * (max - min + 1)) + min\n        } while (this.usedNumbers.has(randomNum))\n\n        this.usedNumbers.add(randomNum)\n\n        return randomNum\n    }\n}\n\nclass Grid {\n    constructor() {\n        this.yAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.xAxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        this.grid = this.createGrid()\n    }\n    createGrid() {\n        const grid = []\n\n        for (let i = 0; i < this.yAxis.length; i++) {\n            for (let j = 0; j < this.xAxis.length; j++) {\n                grid.push(`${this.yAxis[i]}${this.xAxis[j]}`)\n            }\n        }\n        \n        return grid\n    }\n    isValid(coordinate) {\n        const row = Math.floor(coordinate / 10)\n        const col = coordinate % 10\n        if (row >= 0 && row <= 9 && col >= 0 && col <= 9 && col + 1 <= 9 ) {\n            return true\n        }\n        return false\n    }\n    findCoords(index) {\n        if (index >= 0 && index < this.grid.length) {\n            return this.grid[index]\n        } else {\n            return 'Invalid index'\n        }\n    }\n} \n\nclass Ship {\n    constructor(shipType) {\n        this.ship = shipType\n        this.hitPoints = this.ship.length       \n        this.isSunk = false\n    }\n    hit() {\n        if(this.isSunk === true) {\n            return\n        }\n        this.hitPoints -= 1\n        if (this.hitPoints <= 0) {\n        this.isSunk = true\n        console.log(`You sunk my ${this.ship.name}!`)\n      }\n      return this.hitPoints\n    }    \n}\n\nclass Player {\n    constructor(name, ) {\n        this.name = name        \n        this.occupiedCoordinates = []\n        this.choosenCoordinates = []        \n        this.ships = this.createShips()\n        this.board = new Grid()\n        \n    }\n    createShips() {\n        const ships = [\n            { name: 'Carrier', length: 5, shipLocation: [0,0,0,0,0], isHorizontal: true },     //ship 0\n            { name: 'Battleship', length: 4, shipLocation: [0,0,0,0], isHorizontal: true },    //ship 1\n            { name: 'Destroyer', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 2\n            { name: 'Submarine', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 3\n            { name: 'Patrol', length: 2, shipLocation: [0,0], isHorizontal: true }             //ship 4\n        ]\n        const playerShips = []\n        for(const ship of ships) {\n            playerShips.push(new Ship(ship))\n        }\n        return playerShips\n    }\n    switchOrientation(shipIndex) {\n        const ship = this.ships[shipIndex].ship        \n        ship.isHorizontal = !ship.isHorizontal\n    }\n    setManualLocation(shipIndex, coordinate) {\n        const ship = this.ships[shipIndex].ship\n        const location = ship.shipLocation\n        const length = ship.length\n        const midIndex = Math.ceil(length / 2) - 1\n\n        for (let i = 0; i < length; i++) {\n            let isHorizontal = ship.isHorizontal\n            location[i] = isHorizontal ? (coordinate - midIndex) + i : (coordinate = (midIndex * 10)) + (i * 10) \n        }\n        return location\n    }\n    setLocation(shipIndex, coordinates) {\n\n        const ship = this.ships[shipIndex].ship\n        const location = ship.shipLocation\n        const isHorizontal = ship.isHorizontal\n\n        for ( let i = 0; i < ship.length; i++ ) {\n            location[i] = isHorizontal ? coordinates + i : coordinates + (i * 10)      \n         }\n         return location\n    }\n    autoPlaceShips() {\n\n        this.occupiedCoordinates.length = 0\n\n        for (let i = 0; i < this.ships.length; i++) {\n            const randomBoolean = Math.random() < 0.5\n            this.ships[i].ship.isHorizontal = randomBoolean\n\n            let location = null\n            let isOccupied = false\n            let isValid = false\n            let inRange = false\n\n            while ( !isValid || !inRange || isOccupied ) {\n\n                const randomCoord = Math.floor(Math.random() * 99)\n                location = this.setLocation(i, randomCoord)\n\n                this.removeRejected(location)\n\n                isOccupied = this.isOccupied(location)\n                isValid = this.checkValidity(location)\n                inRange = this.isInRange()\n\n            }\n        }\n        let isShort = this.checkOccupiedLength()\n        if (isShort) {\n            this.autoPlaceShips()\n        }\n\n    }\n    \n    fire(coords) {\n        this.choosenCoordinates.push(coords)\n        return coords\n    } \n    isHit(coords) {\n        \n        for (const ship of this.ships) {\n            const isOccupied = ship.ship.shipLocation.some(location => {\n                return coords == location\n            })\n            if (isOccupied) {\n                ship.hit()\n                \n                return true\n            }\n        }\n        return false\n    }\n    isGameOver() {       \n        for (const ship of this.ships) {\n            if (!ship.isSunk) {\n                return false\n            } \n        }\n        return true\n    }\n    //validating auto placed ships\n    isInRange() {\n        const ships = this.ships\n        for (const ship of ships) {\n            for (const coord of ship.ship.shipLocation) {\n                if (coord < 0 || coord > 99) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n    checkValidity(location) {\n        for (const coord of location) {\n            if ( !this.board.isValid(coord)) {\n                return false\n            }\n        }\n        return true\n    }\n    isOccupied(location) {\n        const isOccupied = this.occupiedCoordinates.some(occupiedLocation => {\n            return occupiedLocation.some(occupiedCoordinate => location.includes(occupiedCoordinate))\n        })\n\n        if ( !isOccupied ) {\n            this.occupiedCoordinates.push(location)\n        }\n\n        return isOccupied\n    }\n    removeRejected(location) {\n        //checks coordinatesare occupied removes coordinates from occupied array        \n        const lastIndex = this.occupiedCoordinates.reduceRight((acc, occupiedLocation, currentIndex) => {\n            if ( !acc && occupiedLocation.some(occupiedCoordinate => location.includes(occupiedCoordinate))) {\n                return currentIndex\n            }\n            return acc\n        }, null)\n        if ( lastIndex !== null ) {\n            this.occupiedCoordinates.splice(lastIndex, 1)\n        }\n    }\n    checkOccupiedLength(){\n        return this.occupiedCoordinates.length !== 5\n    }\n}\n    \n\n\n\nmodule.exports = {\n    Grid,\n    Player,\n    Ship,\n    Game,\n    AiCoordGenerator,\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nimport { Game, AiCoordGenerator, Grid} from './script'\n\nconst newGame = new Game()\nnewGame.startGame()\n\nconst containerDiv = document.getElementById('container')\nconst friendlyWaters = document.getElementById('friendlyWaters')\nconst enemyWaters = document.getElementById('enemyWaters')\n\nlet currentShip = null\nlet selectedSquare = null\n\nfunction labelGrid(alphaParent, numParent, parentTxt) {\n\n    const playerGrid = newGame.p1Board\n    const alphaCoords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n    const numCoords = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\n    for (let i = 0; i < 10; i++ ) {\n\n        const alphaSquare = document.createElement('div')\n        alphaSquare.id = `${parentTxt}gridSquare${i}`\n        alphaSquare.classList.add('alphaSquare')\n        alphaSquare.innerHTML = alphaCoords[i]\n        alphaParent.appendChild(alphaSquare)\n\n    }\n    for (let i = 0; i < 10; i++ ) {\n\n        const numSquare = document.createElement('div')\n        numSquare.id = `${parentTxt}gridSquare${i}`\n        numSquare.classList.add('numSquare')\n        numSquare.innerHTML = numCoords[i]\n        numParent.appendChild(numSquare)\n\n    }\n\n}\n\nfunction renderGrid(parent, parentTxt) {\n\n    const alphaDiv = document.createElement('div')\n    const numDiv = document.createElement('div')\n    alphaDiv.classList.add('alphaDiv')\n    numDiv.classList.add('numDiv')\n   \n    for (let i = 0; i < 100; i++) {\n\n        const coords = newGame.p1Board.findCoords(i)    \n        const gridSquare = document.createElement('div')\n        gridSquare.classList.add('gridSquare', parentTxt)\n        gridSquare.id = `${coords}-${parentTxt}`     \n        gridSquare.setAttribute('data-coords', coords)\n        // console.log(`converted: ${convertCoordinatesToGrid(coords)}`)\n        gridSquare.style.gridArea =  convertCoordinatesToGrid(coords)  \n        parent.appendChild(gridSquare)\n\n    }\n\n    parent.appendChild(alphaDiv)\n    parent.appendChild(numDiv)\n    labelGrid(alphaDiv, numDiv, parentTxt)\n}\n\nfunction handleSquares() {\n\n    const gridSquares = document.querySelectorAll('.gridSquare')\n\n    gridSquares.forEach(square => {\n\n        const coords = square.dataset.coords\n\n        square.addEventListener('click', ()  => {\n\n            const isPlayer1 = (newGame.currentPlayer.name == newGame.player1.name)\n            console.log(`coords: ${typeof(coords)}`)\n            //check then mark a hit or miss\n            newGame.player1.fire(coords)\n            const isHit = newGame.player2.isHit(coords) \n            \n            markSquare(square.id, isHit)\n           if (!newGame.isGameOver()) {\n                \n\n                togglePlayer()\n           } else {\n            handleEnemyShips()\n            console.log(`GAME OVER!`)\n           }\n            \n\n        })\n        square.addEventListener('dragover', (e) => {\n            e.preventDefault()\n           \n        })\n        square.addEventListener('drop', (e) => {\n            e.preventDefault()\n\n            if (!newGame.p1Board.isValid(coords))return\n           \n            const currentShipIndex = getIndexFromName(currentShip)\n            const location = newGame.player1.setManualLocation(currentShipIndex, coords)\n            \n            console.log(location)\n            renderAllShips()  \n            setupGame() \n\n        })\n    })\n}\n\nconst handleEnemyShips = () => {\n    const enemyShips = document.querySelectorAll('.enemyShip')\n    if (!newGame.isGameOver()) {\n        enemyShips.forEach((ship) => {\n            ship.classList.add('hide')\n        })\n    } else {\n        enemyShips.forEach((ship) => {\n            ship.classList.remove('hide')\n        })\n    }\n}\n\nconst togglePlayer = () => {\n\n    const instructionsDiv = document.getElementById('instructions')\n    \n    newGame.togglePlayer()\n    \n    instructionsDiv.textContent = `${newGame.currentPlayer.name}'s Turn`\n    console.log(`currentPlayer: ${newGame.currentPlayer.name}`)\n\n    const isPlayer1  = newGame.currentPlayer.name == newGame.player1.name\n    console.log(`isPlayer1: ${isPlayer1}`)\n\n    if (!isPlayer1) {\n        const newCoord = new AiCoordGenerator()\n        const coords = newCoord.getRandomUniqueNumber()\n        const formatedCoords = coords < 10 ? `0${coords}` : coords.toString()\n        console.log(`coords: ${(formatedCoords)}`)\n        // if formatedCoords is not in chooseCoords continue or get a new coord \n        newGame.player2.fire(formatedCoords)\n        const isHit = newGame.player1.isHit(formatedCoords) \n        markSquare(`${formatedCoords}-revealed`, isHit)\n        togglePlayer()\n        \n    }\n\n    return\n}\nconst markSquare = (squareId, isHit) => {\n\n    const selected = document.getElementById(squareId)\n\n    const peg = document.createElement('div')\n    peg.style.backgroundColor = isHit ? 'red' : 'white'\n    peg.classList.add('peg')\n   \n   selected.appendChild(peg)\n}\n//for ships\nconst convertToGrid = (coordiante, ship) => {\n    \n    const lastIndex = coordiante.length - 1\n\n    const shipLength = ship.length\n    const isHorizontal = ship.isHorizontal\n\n    const firstCoord = Math.floor(Number(coordiante[0]))\n    const lastCoord = Math.floor(coordiante[lastIndex])\n    \n    const firstDigit = isHorizontal ? Math.floor(firstCoord / 10) : Math.floor(lastCoord / 10) \n    const secondDigit = isHorizontal ?  firstCoord % 10 : lastCoord % 10     \n   \n    const rowStart = firstDigit + 1\n    const colStart = secondDigit + 1\n\n    const rowEnd = isHorizontal ? rowStart + shipLength - 1 : rowStart\n    const colEnd = isHorizontal ? colStart  + shipLength : colStart\n\n    return `${rowStart} / ${colStart} / ${rowEnd} / ${colEnd}`\n}\n\n//for grid squares\nconst convertCoordinatesToGrid = (coordinate) => {\n\n    let rowNum = coordinate[0]\n    rowNum++\n    let columnNum = coordinate[1]\n    columnNum++\n\n    const rowStart = rowNum\n    const rowEnd = rowStart + 1\n    const columnStart = columnNum\n    const columnEnd = columnStart + 1\n    // console.log( `${rowStart} / ${columnStart} / ${rowEnd} / ${columnEnd}`)\n    return `${rowStart} / ${columnStart} / ${rowEnd} / ${columnEnd}`\n}\n\nconst capFirstLetter = (inputString) => {\n    const [firstLetter, ...rest] = inputString\n    return `${firstLetter.toUpperCase()}${rest.join('')}`\n}\n\nfunction getIndexFromName(shipName) {\n\n    console.log(shipName)\n    if (shipName === null) return\n\n    let upperCaseName = capFirstLetter(shipName)\n    const ships = newGame.player1.ships\n    for (let i = 0; i < ships.length; i++) {\n       if (ships[i].ship.name === upperCaseName) {\n        return i\n       }\n    }\n   \n}\nconst renderShips = (isPlayer1) => {\n\n    const shipImages = [\n        {\n            id: 'carrier', \n            src: \"images/carrier.png\",\n            alt: \"carrier-icon\"\n        },\n        {\n            id: 'battleship', \n            src: \"images/battleship.png\",\n            alt: \"battleship-icon\"\n        },\n        {\n            id: 'destroyer', \n            src: \"images/destroyer.png\",\n            alt: \"destroyer-icon\"\n        },\n        {\n            id: 'submarine', \n            src: \"images/submarine.png\",\n            alt: \"submarine-icon\"\n        },\n        {\n            id: 'patrol', \n            src: \"images/patrol.png\",\n            alt: \"patrol-icon\"\n        }\n    ]\n\n    const dryDock = document.createElement('div')\n    dryDock.className = 'dry-dock'\n    containerDiv.appendChild(dryDock)\n\n    for (let i = 0; i < shipImages.length; i++) {\n\n        const shipData = isPlayer1 \n        ? newGame.player1.ships[i].ship : newGame.player2.ships[i].ship\n\n        const shipCoord = shipData.shipLocation\n        const isHorizontal = shipData.isHorizontal\n      \n        const shipImage = document.createElement('img')\n        shipImage.id = isPlayer1 ? shipImages[i].id : `enemy-${shipImages[i].id}`\n        shipImage.src = shipImages[i].src\n        shipImages.alt = shipImages[i].alt\n        shipImage.style.width = (shipData.length * 45) + 'px'\n\n        let gridAreaValue = convertToGrid(shipCoord, shipData)\n        \n        if (isHorizontal) {\n            shipImage.classList.remove('rotate')\n        } else {\n            shipImage.classList.add('rotate')           \n        }\n        shipImage.style.gridArea = gridAreaValue\n        \n        if (isPlayer1) {\n            let isNotSet = (shipCoord[1] == 0)\n            isNotSet ? shipImage.classList.add('ship-icon') : shipImage.classList.add('gridShip')\n            isNotSet ? dryDock.appendChild(shipImage) : friendlyWaters.appendChild(shipImage)       \n        } else {\n            shipImage.classList.add('enemyShip')\n            enemyWaters.appendChild(shipImage)\n        }\n    }\n}\n const removeElements = (elements) => {    \n    for (const el of elements) \n        el.remove()\n}\nconst renderAllShips = () => {\n\n    //remove dry dock\n    const prevDock = document.querySelectorAll('.dry-dock')\n    removeElements(prevDock)\n\n    //remove previous ships\n    const prevShips = document.querySelectorAll('.ship-icon')    \n    removeElements(prevShips)\n\n    const prevGridShip = document.querySelectorAll('.gridShip')\n    removeElements(prevGridShip)\n\n    const prevEnemyShip = document.querySelectorAll('.enemyShip')\n    removeElements(prevEnemyShip)\n\n    //player1\n    renderShips(true)\n    //player2\n    renderShips(false)\n\n    addShipListeners()\n}\n\nfunction setupGame() {\n\n    const instructionsDiv = document.getElementById('instructions')\n    instructionsDiv.textContent = messages.startingInstruction\n\n    const unplacedShips = document.querySelectorAll('.ship-icon')\n    \n    const toggleBtn = document.createElement('button')\n    toggleBtn.textContent = 'Toggle Hide'\n    instructionsDiv.appendChild(toggleBtn)\n\n    toggleBtn.addEventListener('click', () => {\n        const enemyShips = document.querySelectorAll('.enemyShip')\n        enemyShips.classList.toggle('.hide')\n    })\n\n    if (unplacedShips.length < 1) {\n\n        //remove instructions\n        instructionsDiv.innerHTML = ''\n\n        const startBtn = document.createElement('button')\n        startBtn.textContent = `Start Game`\n        instructionsDiv.appendChild(startBtn)\n\n        startBtn.addEventListener('click', () => {\n            \n            currentShip = null\n            console.log(`currentPlayer: ${newGame.currentPlayer.name}`)\n            instructionsDiv.textContent = messages.currentPlayerTurn\n            addShipsToOccupied()\n        })\n\n       \n\n\n    }\n\n}\nconst updateMessages = () => {\n\n    const unplacedShips = document.querySelectorAll('.ship-icon')\n\n}\nconst addShipsToOccupied = () => {\n    const occupied = newGame.player1.occupiedCoordinates\n    occupied.length = 0\n   const ships = newGame.player1.ships\n   for ( let i = 0; i < ships.length; i++ ) {\n    console.log(`shipsLocation: ${occupied}`)\n    occupied.push(ships[i].ship.shipLocation)\n   }\n   console.log(`p1 occupied: ${occupied}`)\n}\nconst messages = {\n\n    startingInstruction: `Drag & drop ships on grid. Double click to rotate.`,\n    currentPlayerTurn: `${newGame.currentPlayer.name}'s Turn`,\n\n\n}\nfunction addShipListeners() {\n\n    const dryShipImg = document.querySelectorAll('.ship-icon')\n\n    for (const ship of dryShipImg) {\n\n        const capitalizedName = capFirstLetter(ship.id)\n        ship.addEventListener('mousedown', () => {\n            currentShip = capitalizedName\n        })\n        \n        ship.addEventListener('dblclick', () => {\n    \n            const shipIndex = getIndexFromName(capitalizedName)\n            const player1 = newGame.player1\n            \n            player1.switchOrientation(shipIndex)\n\n            let isHorizontal = player1.ships[shipIndex].ship.isHorizontal            \n            isHorizontal = !isHorizontal\n            renderAllShips()\n      \n            console.log(`isHorizontal: ${player1.ships[shipIndex].ship.isHorizontal}`)\n        })\n    \n    }\n    \n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    \n    renderGrid(enemyWaters, 'hidden')\n    renderGrid(friendlyWaters, 'revealed')\n    handleSquares()\n    \n    renderAllShips()\n    \n    addShipListeners()\n    setupGame()\n    handleEnemyShips()\n    // console.log(`current player ${newGame.currentPlayer.name}`)\n    // newGame.togglePlayer()\n    // console.log(`current player ${newGame.currentPlayer.name}`)\n    // newGame.togglePlayer()\n    // console.log(`current player ${newGame.currentPlayer.name}`)\n\n\n })\n\n"],"names":[],"sourceRoot":""}