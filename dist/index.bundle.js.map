{"version":3,"file":"index.bundle.js","mappings":";;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAwD;AACtE,cAAc,yDAAyD;AACvE,cAAc,sDAAsD;AACpE,cAAc,sDAAsD;AACpE,cAAc,8DAA8D;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCpSA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNkC;AACE;;AAEpC;AACA,eAAe,yCAAI;AACnB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,oBAAoB,QAAQ;AAC5B;AACA,4BAA4B,UAAU,YAAY,EAAE;AACpD;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,0BAA0B,UAAU,YAAY,EAAE;AAClD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;AACA;AACA,0BAA0B,UAAU,YAAY,EAAE;AAClD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA,cAAc,0BAA0B,EAAE,cAAc;AACxD;;AAEA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,EAAE","sources":["webpack://battle-ship/./src/script.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/webpack/runtime/compat get default export","webpack://battle-ship/webpack/runtime/define property getters","webpack://battle-ship/webpack/runtime/hasOwnProperty shorthand","webpack://battle-ship/webpack/runtime/make namespace object","webpack://battle-ship/./src/index.js"],"sourcesContent":["\nclass Game {\n    constructor() {\n        this.player1 = new Player('player1')\n        this.player2 = new Player('player2')        \n        this.currentPlayer = null\n        this.otherPlayer = null\n        this.revealedBoard = new Grid()        \n        this.hiddenBoard = new Grid()\n        this.gameOver = false\n    }\n   startGame() {\n        // start new game\n        this.setPlayer()\n        //if ships locations are not set, set them\n        // for (let i = 0; i < 5; i ++) {\n        //     this.currentPlayer.setShipLocation(i, promptPlayer())\n        //     this.otherPlayer.setShipLocation(i, promptPlayer())\n        // }\n        if (!this.gameOver) {\n           this.playRound()            \n        }\n    } \n    // promptPlayer() {\n\n    // }\n    playRound() {\n\n        //prompt for coords\n        this.currentPlayer.fire(hitCoords)\n        this.isHit(hitCoords)\n        this.setPlayer()\n    }\n    setPlayer() {\n        //select starting player and change player turn at end of previous turn\n\n        if (this.currentPlayer === null) {\n            this.currentPlayer = this.player1 \n            this.otherPlayer = this.player2        \n            return this.player1\n        } else if (this.currentPlayer === this.player2) {\n            this.currentPlayer = this.player1\n            this.otherPlayer = this.player2\n            return this.player1 \n        }\n        this.currentPlayer = this.player2\n        this.otherPlayer = this.player1\n        return this.player2\n    }\n    isHit(coords) {\n        let coordinates = this.otherPlayer.occupiedCoordinates\n        for (let i = 0; i < coordinates.length; i++) {\n            for (let j = 0; j < coordinates[i].length; j++) {\n                if (coords === coordinates[i][j].location) {\n                    if (!coordinates[i][j].isHit) {\n                        this.otherPlayer.ships[i].hit()\n                        coordinates[i][j].isHit = true\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n    isGameOver() {\n        //if otherplayer .ships[i].isSunk game is over\n        for (let i = 0; i < this.otherPlayer.ships.length; i++) {\n            if (this.otherPlayer.ships[i].isSunk === true) {\n              return  this.gameOver = true\n\n            }\n        }\n      return  this.gameOver = false\n    }\n}\n\n\nclass Grid {\n    constructor() {\n        this.yAxis = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n        this.xAxis = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n        this.grid = this.createGrid()\n        this.indexTree = this.gridIndexTree()\n        this.coordTree = this.gridCoordinatesTree()\n    }\n    createGrid() {\n        const grid = []\n\n        for (let i = 0; i < this.yAxis.length; i++) {\n            for (let j = 0; j < this.xAxis.length; j++) {\n                grid.push([this.yAxis[i] + this.xAxis[j]])\n            }\n        }\n        \n        return grid\n    }\n    gridIndexTree() {\n        const linkedGrid = []\n        const numRows = 10\n        const numCols = 10\n        for (let i = 0; i < 100; i++) {\n            const row = Math.floor(i / numCols)\n            const col = i % numCols\n            this.grid[i].left = col > 0 ? i - 1 : null\n            this.grid[i].up = row > 0 ? i - numCols : null\n            this.grid[i].right = col < numCols - 1 ? i + 1 : null\n            this.grid[i].down = row < numRows - 1 ? i + numCols : null\n            linkedGrid.push({                    \n                    left: this.grid[i].left,\n                    up: this.grid[i].up,\n                    right: this.grid[i].right,\n                    down: this.grid[i].down\n                })\n        }\n        return linkedGrid\n    }\n    getCellTree(index) {\n        const linkedGrid = []\n        const numRows = 10\n        const numCols = 10\n\n        const row = Math.floor(index / numCols)\n        const col = index % numCols\n        \n        this.grid[index].left = col > 0 ? index - 1 : null\n        this.grid[index].up = row > 0 ? index - numCols : null\n        this.grid[index].right = col < numCols - 1 ? index + 1 : null\n        this.grid[index].down = row < numRows - 1 ? index + numCols : null\n        linkedGrid.push({                    \n            left: this.grid[index].left,\n            up: this.grid[index].up,\n            right: this.grid[index].right,\n            down: this.grid[index].down\n            })\n        \n        return linkedGrid\n\n    }\n    gridCoordinatesTree() {\n        const coordsTree = []\n        \n        for (const index in this.indexTree) {\n\n            const node = this.indexTree[index]\n            const leftIndex = node.left\n            const upIndex = node.up\n            const rightIndex = node.right\n            const downIndex = node.down\n\n            const coords = {\n                left: leftIndex !== null ? this.findCoords(leftIndex) : null,\n                up: upIndex !== null ? this.findCoords(upIndex) : null,\n                right: rightIndex !== null ? this.findCoords(rightIndex) : null,\n                down: downIndex !== null ? this.findCoords(downIndex) : null\n            }\n\n            coordsTree.push(coords)\n            \n        }\n        return coordsTree       \n    }\n    findCoords(index) {\n        const grid = this.grid\n       if (index >= 0 && index < grid.length) {        \n        return grid[index][0]\n       }\n       return 'Invalid index'\n    }\n    findIndex(x, y) {\n        const grid = this.grid\n        for (let i = 0; i < grid.length; i++) {\n            if (grid[i][0] === x && grid[i][1] === y) {\n             return grid[i]\n            }\n        }\n        return 'Target not found'\n    }\n    isValid(x, y) {\n        return this.grid.some(element => element[0] === x && element[1] === y)\n    }\n    \n} \n\nclass Ship {\n    constructor(shipType) {\n        this.ship = shipType\n        this.hitPoints = this.ship.length\n        this.isHorizontal = true\n        this.isSunk = false\n    }\n    hit() {\n        if(this.isSunk === true) {\n            return\n        }\n        this.hitPoints -= 1\n        if (this.hitPoints <= 0) {\n        this.isSunk = true\n        console.log(`You sunk my ${this.ship.name}!`)\n      }\n      return this.hitPoints\n    }    \n    switchOrientation() {\n        if (this.isHorizontal) {\n            this.isHorizontal = false\n            return 'verticle'\n        }\n        this.isHorizontal = true\n        return 'horizontal'\n    }\n   \n}\n\nclass Player {\n    constructor(name, ) {\n        this.name = name        \n        this.occupiedCoordinates = []\n        this.choosenCoordinates = []        \n        this.ships = this.createShips()\n        \n    }\n    createShips() {\n        const ships = [\n            { name: 'Carrier', length: 5, shipLocation: [0,0,0,0,0], },     //ship 0\n            { name: 'Battleship', length: 4, shipLocation: [0,0,0,0], },    //ship 1\n            { name: 'Destroyer', length: 3, shipLocation: [0,0,0], },       //ship 2\n            { name: 'Submarine', length: 3, shipLocation: [0,0,0], },       //ship 3\n            { name: 'Patrol', length: 2, shipLocation: [0,0], }             //ship 4\n        ]\n        const playerShips = []\n        for(const ship of ships) {\n            playerShips.push(new Ship(ship))\n        }\n        return playerShips\n    }\n    setShipLocation(shipsIndex, coordinatesArray) {\n       \n      \n       const ship = this.ships[shipsIndex].ship\n       \n       const shipsCoords = []\n       for (let i = 0; i < ship.length; i++) {\n        ship.shipLocation[i] = coordinatesArray[i]        \n        shipsCoords.push( {\n                player: this.name,\n                ship: ship.name, \n                location: ship.shipLocation[i], \n                isHit: false\n            })\n       }\n       this.occupiedCoordinates.push(shipsCoords)\n       return shipsCoords\n    }\n    fire(coords) {\n        for (let i = 0; i < this.choosenCoordinates.length; i++) {\n            if( coords === this.choosenCoordinates[i]) \n            return 'coordinates already been fired at'\n        } \n        const selected = []\n        selected.push(coords)\n        this.choosenCoordinates.push(selected)    \n        return 'shot fired'\n        } \n       \n    }\n\n\n\n\nconst newGame = new Game()\nconst carrierCoord = ['a1', 'a2', 'a3', 'a4', 'a5']\nconst battleshipCoord = ['b2', 'b3', 'b4', 'b5']\nconst destroyerCoord = ['c3', 'c4', 'c5']\nconst submarineCoord = ['d3', 'e3', 'f3']\nconst patrolCoord = ['f5', 'h5']\nconst hitCoords = 'a2'\n\nnewGame.player1.setShipLocation(0, carrierCoord)\nnewGame.player1.setShipLocation(1, battleshipCoord)\nnewGame.player1.setShipLocation(2, destroyerCoord)\nnewGame.player1.setShipLocation(3, submarineCoord)\nnewGame.player1.setShipLocation(4, patrolCoord)\n\nnewGame.player2.setShipLocation(0, carrierCoord)\nnewGame.player2.setShipLocation(1, battleshipCoord)\nnewGame.player2.setShipLocation(2, destroyerCoord)\nnewGame.player2.setShipLocation(3, submarineCoord)\nnewGame.player2.setShipLocation(4, patrolCoord)\nmodule.exports = {\n    Grid,\n    Player,\n    Ship,\n    Game,\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { isValid } from 'date-fns'\nimport { Game, Grid} from './script'\n\nfunction createtGame() {\n    return new Game()\n}\nconst newGame = createtGame()\nnewGame.startGame()\n\nconst containerDiv = document.getElementById('container')\nconst revealedGrid = document.getElementById('revealedGrid')\nconst hiddenGrid = document.getElementById('hiddenGrid')\n\nfunction labelGrid(alphaParent, numParent, parentTxt) {\n\n    const playerGrid = newGame.revealedBoard\n    const alphaCoords = playerGrid.yAxis\n    const numCoords = playerGrid.xAxis\n\n    for (let i = 0; i < 10; i++ ) {\n        const alphaSquare = document.createElement('div')\n        alphaSquare.id = `${parentTxt}gridSquare${i}`\n        alphaSquare.classList.add('alphaSquare')\n        alphaSquare.innerHTML = alphaCoords[i]\n        alphaParent.appendChild(alphaSquare)\n    }\n    for (let i = 0; i < 10; i++ ) {\n        const numSquare = document.createElement('div')\n        numSquare.id = `${parentTxt}gridSquare${i}`\n        numSquare.classList.add('numSquare')\n        numSquare.innerHTML = numCoords[i]\n        numParent.appendChild(numSquare)\n    }\n\n}\n\nfunction renderGrid(parent, parentTxt) {\n    const alphaDiv = document.createElement('div')\n    const numDiv = document.createElement('div')\n    alphaDiv.classList.add('alphaDiv')\n    numDiv.classList.add('numDiv')\n   \n\n    for (let i = 0; i < 100; i++) {\n       const gridSquare = document.createElement('div')\n       gridSquare.classList.add('gridSquare')\n       gridSquare.id = `${parentTxt}gridSquare${i}`      \n       parent.appendChild(gridSquare)\n    }\n\n    parent.appendChild(alphaDiv)\n    parent.appendChild(numDiv)\n    labelGrid(alphaDiv, numDiv, parentTxt)\n}\n\n//add event listener to each square\nconst shipDropLoc = []\nconst resetDropLoc = () => shipDropLoc.length = 0\n\nfunction handleSquares() {\n\n    const gridSquares = document.querySelectorAll('.gridSquare')\n\n    gridSquares.forEach(square => {\n        const id = square.id;\n        const number = id.match(/\\d+/)[0];\n        const startCoords = getCoords(number)\n        const coords = startCoords\n        \n        square.addEventListener('click', ()  => {\n            resetDropLoc()\n            console.log(id)\n            console.log(number)\n            console.log(coords)\n        })\n        square.addEventListener('dragover', (e) => {\n            e.preventDefault()\n           \n        })\n        square.addEventListener('drop', (e) => {\n            e.preventDefault()\n            console.log(coords)\n            console.log(newGame.revealedBoard.isValid(coords))\n           \n   \n        })\n    })\n}\n\nconst capFirstLetter = (inputString) => {\n    const [firstLetter, ...rest] = inputString\n    return `${firstLetter.toUpperCase()}${rest.join('')}`\n}\n\nfunction getIndexFromName(shipName) {\n    let upperCaseName = capFirstLetter(shipName)\n    const ships = newGame.player1.ships\n    for (let i = 0; i < ships.length; i++) {\n       if (ships[i].ship.name === upperCaseName) {\n        return i\n       }\n    }\n   \n}\n\nfunction getCoords(index) {\n    \n    const coords = newGame.hiddenBoard.findCoords(index)\n    return coords\n}\n\n\nfunction getSquareIndexFromEvent(e) {\n    const target = e.target\n    const id = target.id\n    const number = id.match(/\\d+/)[0]\n    return parseInt(number)\n}\n\nconst toggleHideElement = (element) => {\n    element.classList.toggle('hide')\n}\nconst hideAllShips = () => {\n   const shipContainers = document.querySelectorAll('.ship-container')\n   for (const container of shipContainers) {\n    container.classList.add('hide')\n   }\n}\n\nconst renderShips = () => {\n    const p1Ships = newGame.player1.ships\n    const p2Ships = newGame.player2.ships\n\n    const shipImages = [\n        {\n            id: 'carrier', \n            src: \"images/carrier.png\",\n            alt: \"carrier-icon\"\n        },\n        {\n            id: 'battleship', \n            src: \"images/battleship.png\",\n            alt: \"battleship-icon\"\n        },\n        {\n            id: 'destroyer', \n            src: \"images/destroyer.png\",\n            alt: \"destroyer-icon\"\n        },\n        {\n            id: 'submarine', \n            src: \"images/submarine.png\",\n            alt: \"submarine-icon\"\n        },\n        {\n            id: 'patrol', \n            src: \"images/patrol.png\",\n            alt: \"patrol-icon\"\n        }\n]\n\n    for (let i = 0; i < shipImages.length; i++) {\n        \n        const shipImage = document.createElement('img')\n        shipImage.classList.add('ship-icon')\n        shipImage.id = shipImages[i].id\n        shipImage.src = shipImages[i].src\n        shipImages.alt = shipImages[i].alt\n        revealedGrid.appendChild(shipImage)\n    }\n    \n}\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    \n    renderGrid(hiddenGrid, 'hidden')\n    renderGrid(revealedGrid, 'revealed')\n    handleSquares()\n\nrenderShips()\ngetIndexFromName('Carrier')\n\n    \n })\n\n\n\n"],"names":[],"sourceRoot":""}