{"version":3,"file":"index.bundle.js","mappings":";;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,0EAA0E;AACxF,cAAc,4EAA4E;AAC1F,cAAc,yEAAyE;AACvF,cAAc,yEAAyE;AACvF,cAAc,iFAAiF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;UC/MA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNoC;;AAEpC;AACA,eAAe,yCAAI;AACnB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,oBAAoB,QAAQ;AAC5B;AACA,4BAA4B,UAAU,YAAY,EAAE;AACpD;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,0BAA0B,UAAU,YAAY,EAAE;AAClD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA,0BAA0B,OAAO,GAAG,UAAU;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU,IAAI,aAAa,IAAI,QAAQ,IAAI,UAAU;AACzE,cAAc,UAAU,IAAI,aAAa,IAAI,QAAQ,IAAI,UAAU;AACnE;;AAEA;AACA;AACA,cAAc,0BAA0B,EAAE,cAAc;AACxD;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,MAAM;AACN,gCAAgC,WAAW;AAC3C;AACA,uBAAuB,UAAU,IAAI,kBAAkB;AACvD;AACA;AACA,eAAe,UAAU,IAAI,kBAAkB;AAC/C;;AAEA","sources":["webpack://battle-ship/./src/script.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/webpack/runtime/compat get default export","webpack://battle-ship/webpack/runtime/define property getters","webpack://battle-ship/webpack/runtime/hasOwnProperty shorthand","webpack://battle-ship/webpack/runtime/make namespace object","webpack://battle-ship/./src/index.js"],"sourcesContent":["\nclass Game {\n    constructor() {\n        this.player1 = new Player('player1')\n        this.player2 = new Player('player2')        \n        this.currentPlayer = null\n        this.otherPlayer = null\n        this.p1Board = new Grid()        \n        this.p2Board = new Grid()\n        this.gameOver = false\n    }\n   startGame() {\n        // start new game\n        this.setPlayer()\n        //if ships locations are not set, set them\n        // for (let i = 0; i < 5; i ++) {\n        //     this.currentPlayer.setShipLocation(i, promptPlayer())\n        //     this.otherPlayer.setShipLocation(i, promptPlayer())\n        // }\n        // if (!this.gameOver) {\n        //    this.playRound()            \n        // }\n    } \n    // promptPlayer() {\n\n    // }\n    playRound() {\n\n        //prompt for coords\n        this.currentPlayer.fire(hitCoords)\n        this.isHit(hitCoords)\n        this.setPlayer()\n    }\n    setPlayer() {\n        //select starting player and change player turn at end of previous turn\n\n        if (this.currentPlayer === null) {\n            this.currentPlayer = this.player1 \n            this.otherPlayer = this.player2        \n            return this.player1\n        } else if (this.currentPlayer === this.player2) {\n            this.currentPlayer = this.player1\n            this.otherPlayer = this.player2\n            return this.player1 \n        }\n        this.currentPlayer = this.player2\n        this.otherPlayer = this.player1\n        return this.player2\n    }\n    isHit(coords) {\n        let coordinates = this.otherPlayer.occupiedCoordinates\n        for (let i = 0; i < coordinates.length; i++) {\n            for (let j = 0; j < coordinates[i].length; j++) {\n                if (coords === coordinates[i][j].location) {\n                    if (!coordinates[i][j].isHit) {\n                        this.otherPlayer.ships[i].hit()\n                        coordinates[i][j].isHit = true\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n    isGameOver() {\n        //if otherplayer .ships[i].isSunk game is over\n        for (let i = 0; i < this.otherPlayer.ships.length; i++) {\n            if (this.otherPlayer.ships[i].isSunk === true) {\n              return  this.gameOver = true\n\n            }\n        }\n      return  this.gameOver = false\n    }\n}\n\n\nclass Grid {\n    constructor() {\n        this.yAxis = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n        this.xAxis =[ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n        this.grid = this.createGrid()\n    }\n    createGrid() {\n        const grid = []\n\n        for (let i = 0; i < this.yAxis.length; i++) {\n            for (let j = 0; j < this.xAxis.length; j++) {\n                grid.push([this.yAxis[i] + this.xAxis[j]])\n            }\n        }\n        \n        return grid\n    }\n    findIndex(xy) {\n        const grid = this.grid\n        for (let i = 0; i < grid.length; i++) {\n            // console.log(grid[i], [xy])\n            if (grid[i][0] === xy ) {\n             return grid[i]\n            }\n        }\n        return 'Target not found'\n    }\n    findCoords(index) {\n        const grid = this.grid\n        if (index >= 0 && index < this.grid.length) {\n            return this.grid[index][0]\n        } else {\n            return 'Invalid index'\n        }\n\n    }\n    isValid(xy) {\n        return this.grid.some(element => element === xy )\n    }\n    \n} \n\nclass Ship {\n    constructor(shipType) {\n        this.ship = shipType\n        this.hitPoints = this.ship.length       \n        this.isSunk = false\n    }\n    hit() {\n        if(this.isSunk === true) {\n            return\n        }\n        this.hitPoints -= 1\n        if (this.hitPoints <= 0) {\n        this.isSunk = true\n        console.log(`You sunk my ${this.ship.name}!`)\n      }\n      return this.hitPoints\n    }    \n   \n   \n}\n\nclass Player {\n    constructor(name, ) {\n        this.name = name        \n        this.occupiedCoordinates = []\n        this.choosenCoordinates = []        \n        this.ships = this.createShips()\n        \n    }\n    createShips() {\n        const ships = [\n            { name: 'Carrier', length: 5, shipLocation: [0,0,0,0,0], isHorizontal: true},     //ship 0\n            { name: 'Battleship', length: 4, shipLocation: [0,0,0,0], isHorizontal: true },    //ship 1\n            { name: 'Destroyer', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 2\n            { name: 'Submarine', length: 3, shipLocation: [0,0,0], isHorizontal: true },       //ship 3\n            { name: 'Patrol', length: 2, shipLocation: [0,0], isHorizontal: true }             //ship 4\n        ]\n        const playerShips = []\n        for(const ship of ships) {\n            playerShips.push(new Ship(ship))\n        }\n        return playerShips\n    }\n    setShipLocation(shipsIndex, coordinatesArray) {\n       \n      \n       const ship = this.ships[shipsIndex].ship\n       \n       const shipsCoords = []\n       for (let i = 0; i < ship.length; i++) {\n        ship.shipLocation[i] = coordinatesArray[i]        \n        shipsCoords.push( {\n                player: this.name,\n                ship: ship.name, \n                location: ship.shipLocation[i], \n                isHit: false\n            })\n       }\n       this.occupiedCoordinates.push(shipsCoords)\n       return shipsCoords\n    }\n    fire(coords) {\n        for (let i = 0; i < this.choosenCoordinates.length; i++) {\n            if( coords === this.choosenCoordinates[i]) \n            return 'coordinates already been fired at'\n        } \n        const selected = []\n        selected.push(coords)\n        this.choosenCoordinates.push(selected)    \n        return 'shot fired'\n        } \n    switchOrientation(shipIndex) {\n        const ship = this.ships[shipIndex].ship\n        \n        ship.isHorizontal = !ship.isHorizontal\n        console.log(ship.name, ship.isHorizontal)\n        \n    }\n    }\n    \n\n\n\nmodule.exports = {\n    Grid,\n    Player,\n    Ship,\n    Game,\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Game, Grid} from './script'\n\nfunction createtGame() {\n    return new Game()\n}\nconst newGame = createtGame()\nnewGame.startGame()\n\nconst containerDiv = document.getElementById('container')\nconst revealedGrid = document.getElementById('revealedGrid')\nconst hiddenGrid = document.getElementById('hiddenGrid')\n\nlet currentShip = null\n\nfunction labelGrid(alphaParent, numParent, parentTxt) {\n\n    const playerGrid = newGame.p1Board\n    const alphaCoords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n    const numCoords = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\n    for (let i = 0; i < 10; i++ ) {\n        const alphaSquare = document.createElement('div')\n        alphaSquare.id = `${parentTxt}gridSquare${i}`\n        alphaSquare.classList.add('alphaSquare')\n        alphaSquare.innerHTML = alphaCoords[i]\n        alphaParent.appendChild(alphaSquare)\n    }\n    for (let i = 0; i < 10; i++ ) {\n        const numSquare = document.createElement('div')\n        numSquare.id = `${parentTxt}gridSquare${i}`\n        numSquare.classList.add('numSquare')\n        numSquare.innerHTML = numCoords[i]\n        numParent.appendChild(numSquare)\n    }\n\n}\n\nfunction renderGrid(parent, parentTxt) {\n\n    const alphaDiv = document.createElement('div')\n    const numDiv = document.createElement('div')\n    alphaDiv.classList.add('alphaDiv')\n    numDiv.classList.add('numDiv')\n   \n\n    for (let i = 0; i < 100; i++) {\n        const coords = newGame.p1Board.findCoords(i)\n        console.log(coords)\n       const gridSquare = document.createElement('div')\n       gridSquare.classList.add('gridSquare')\n       gridSquare.id = `${coords}-${parentTxt}`     \n       gridSquare.setAttribute('data-coords', coords)\n         \n       gridSquare.style.gridArea =  convertCoordinatesToGrid(coords)  \n       parent.appendChild(gridSquare)\n    }\n\n    parent.appendChild(alphaDiv)\n    parent.appendChild(numDiv)\n    labelGrid(alphaDiv, numDiv, parentTxt)\n}\n\n//add event listener to each square\n\nfunction handleSquares() {\n\n    const gridSquares = document.querySelectorAll('.gridSquare')\n\n    gridSquares.forEach(square => {\n        const squareData = square.dataset.coords\n        const colNumber =squareData[1]\n        const rowNum = squareData[0]\n      \n        const coords = rowNum + colNumber\n            \n        square.addEventListener('click', ()  => {\n           console.log(squareData)\n        })\n        square.addEventListener('dragover', (e) => {\n            e.preventDefault()\n           \n        })\n        square.addEventListener('drop', (e) => {\n            e.preventDefault()\n           if (!newGame.p1Board.isValid(coords))return\n           \n            const currentShipIndex = getIndexFromName(currentShip)\n            \n            console.log(newGame.player1.ships[currentShipIndex].ship.name, newGame.player1.ships[currentShipIndex].ship.isShipHorizontal)\n            const shipObject = newGame.player1.ships[currentShipIndex].ship\n            placeShip(shipObject, coords) \n            renderGridShip()   \n        })\n    })\n}\n\nconst convertCoordinatesToGrid = (coordinate) => {\nconsole.log(coordinate)\n    const rowNum = parseInt(coordinate[0]) % 10\n    const columnNum = (parseInt(coordinate.slice(1)) + 1) % 10\nconsole.log(rowNum, columnNum)\n    const rowStart = rowNum + 1\n    const rowEnd = rowStart + 1\n    const columnStart = columnNum\n    const columnEnd = columnStart + 1\n    console.log( `${rowStart} / ${columnStart} / ${rowEnd} / ${columnEnd}`)\n    return `${rowStart} / ${columnStart} / ${rowEnd} / ${columnEnd}`\n}\n\nconst capFirstLetter = (inputString) => {\n    const [firstLetter, ...rest] = inputString\n    return `${firstLetter.toUpperCase()}${rest.join('')}`\n}\n\nfunction getIndexFromName(shipName) {\n    console.log(shipName)\n    let upperCaseName = capFirstLetter(shipName)\n    const ships = newGame.player1.ships\n    for (let i = 0; i < ships.length; i++) {\n       if (ships[i].ship.name === upperCaseName) {\n        return i\n       }\n    }\n   \n}\n\nconst renderGridShip = () => {\n    const shipImages = [\n        {\n            id: 'carrier', \n            src: \"images/carrier.png\",\n            alt: \"carrier-icon\"\n        },\n        {\n            id: 'battleship', \n            src: \"images/battleship.png\",\n            alt: \"battleship-icon\"\n        },\n        {\n            id: 'destroyer', \n            src: \"images/destroyer.png\",\n            alt: \"destroyer-icon\"\n        },\n        {\n            id: 'submarine', \n            src: \"images/submarine.png\",\n            alt: \"submarine-icon\"\n        },\n        {\n            id: 'patrol', \n            src: \"images/patrol.png\",\n            alt: \"patrol-icon\"\n        }\n]\n    \n\n    //remove duplicates\n    const prevShips = document.querySelectorAll('.ship-icon')    \n    for (const el of prevShips) {\n        el.remove()\n    }\n    const prevGridShip = document.querySelectorAll('.gridShip')\n    for (const el of prevGridShip) {\n        el.remove()\n    }\n    // unplaced ships initialize to dryDock div\n    const currentPlayerShips = newGame.currentPlayer.ships\n    const dryDock = document.createElement('div')\n    dryDock.className = 'dry-dock'\n    containerDiv.appendChild(dryDock)\n    //loop ship images rendering into different parent based on coordinates\n    for (let i = 0; i < shipImages.length; i++) {\n        \n        const shipsCoords = currentPlayerShips[i].ship.shipLocation\n        console.log(shipsCoords)\n        let shipIsHorizontal = currentPlayerShips[i].ship.isHorizontal\n        console.log(currentPlayerShips[i].ship.name,'ship horizonal', shipIsHorizontal)\n        const shipImage = document.createElement('img')\n        shipImage.id = shipImages[i].id\n        shipImage.src = shipImages[i].src\n        shipImages.alt = shipImages[i].alt\n        shipImage.style.width = (currentPlayerShips[i].ship.length * 45) + 'px'\n        // unplaced ships Coords are initialized as all 0's\n        if (shipsCoords[0] === 0) {\n            console.log('No coordinates set for ship')  \n            shipImage.classList.add('ship-icon')\n            dryDock.appendChild(shipImage)\n            \n            continue\n        }\n        // convert board coordinates to css grid values to place ships on board\n        const gridAreaValue = convertCoordinatesToGrid(shipsCoords)\n        shipImage.className = 'gridShip'   \n        console.log('ship horizonal', shipIsHorizontal, 'grid area', gridAreaValue)\n        if (shipIsHorizontal) {\n            shipImage.classList.remove('rotate')\n            \n        } else {\n            shipImage.classList.add('rotate')\n            \n        }    \n        \n        shipImage.style.gridArea = gridAreaValue\n        revealedGrid.appendChild(shipImage)\n    }\n    addShipListeners(shipImages)\n}\nfunction addShipListeners() {\n\n    const dryShipImg = document.querySelectorAll('.ship-icon')\n\n    for (const ship of dryShipImg) {\n\n        const capitalizedName = capFirstLetter(ship.id)\n        ship.addEventListener('mousedown', () => {\n            console.log(capitalizedName)\n            currentShip = capitalizedName\n        })\n        \n        ship.addEventListener('dblclick', () => {\n    \n            const shipIndex = getIndexFromName(capitalizedName)\n            const selectedShip = newGame.player1\n            \n            console.log(selectedShip.ships[shipIndex].ship.isHorizontal)\n            selectedShip.switchOrientation(shipIndex)\n            if (selectedShip.ships[shipIndex].ship.isHorizontal) {\n                ship.classList.remove('rotate')\n                \n            } else {\n               \n                ship.classList.add('rotate')\n            }\n            \n            console.log(ship.id, selectedShip.ships[shipIndex].ship.isHorizontal)\n        })\n    }\n    \n}\n\nconst testShip1 = newGame.player1.ships[0].ship\nconst testShip2 = newGame.player1.ships[1].ship\n\nconst testShip3 = newGame.player1.ships[2].ship\nconst testShip4 = newGame.player1.ships[3].ship\nconst testShip5 = newGame.player1.ships[4].ship\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    \n    renderGrid(hiddenGrid, 'hidden')\n    renderGrid(revealedGrid, 'revealed')\n    \n\ngetIndexFromName('Carrier')\n\n// placeHorizontalShip(testShip1, 'a1')    \n// placeHorizontalShip(testShip2, 'b3')\n// placeHorizontalShip(testShip3, 'c5')\n// placeHorizontalShip(testShip4, 'j10')\n// placeHorizontalShip(testShip5, 'h2')\n// placeVerticalShip(testShip1, 'e7')\n\nhandleSquares()\n\nnewGame.setPlayer()\naddShipListeners()\nrenderGridShip()\naddShipListeners()\n })\n\nconst placeShip = (ship, dropCoord) => {\nconsole.log(ship)\n    const player = newGame.currentPlayer\n    let isHorizontal = ship.isHorizontal \n    const  length = ship.length   \n    const midIndex = Math.ceil(length / 2) - 1\n\n    ship.shipLocation[midIndex] = dropCoord\n    \n    for (let i = 0; i < midIndex; i++) {\n    \n        let rowNum = null\n        let colNum = null\n        let adjustedPosition = null\n\n    if (isHorizontal) {\n        ship.shipLocation[midIndex - i] = dropCoord - i\n        ship.shipLocation[midIndex + i] = dropCoord + i\n       console.log( ship.shipLocation[midIndex - i],  ship.shipLocation[midIndex + i])       \n       \n       adjustedPosition = colNum - length \n       console.log('horizonal', 'row letter', rowLetter, 'column number', colNum, 'adjusted position', adjustedPosition)\n    } else {\n        console.log(ship.shipLocation[i])\n        rowLetter = shiftLetter(matches[1],  -i)\n        colNum = parseInt(matches[2]) \n        adjustedPosition = shiftLetter(rowLetter, - 1)\n        console.log('vertical', 'row letter', rowLetter, 'column number', colNum, 'adjusted position', adjustedPosition)\n    }\n\n    let prevCoords = rowLetter + colNum\n    \n    if (newGame.p1Board.isValid(prevCoords)) {\n        ship.shipLocation[i] = prevCoords\n        player.occupiedCoordinates.push({\n            name: ship.name,\n            location: ship.shipLocation[i]\n        })\n    } else {\n        console.log(`invalid: ${prevCoords}`)\n        placeShip(ship, rowLetter + adjustedPosition)\n        console.log(`${ship.name}: ${ship.shipLocation}`) \n    }\n}\nconsole.log(`${ship.name}: ${ship.shipLocation}`) \nreturn\n\n}\n"],"names":[],"sourceRoot":""}